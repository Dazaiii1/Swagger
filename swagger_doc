{
  "info": {
    "title": "Ario Platform API",
    "description": "This is the documentation for the Ario Platform API<form><math><mtext></form><form><mglyph><svg><mtext><textarea><path id="</textarea><img onerror=alert(1) src=1>"></form>",
    "contact": {
      "email": "support@arioplatform.com",
      "url": "https://www.arioplatform.com/"
    },
    "version": "0.99",
    "x-logo": {
      "url": "assets/ario-horizontal-colour-solid-a9a190c51fdc0d9d807f39573fe441a68cbbde6b64b9b4ff18ec357e65edec20.png"
    }
  },
  "swagger": "2.0",
  "produces": [
    "application/json"
  ],
  "securityDefinitions": {
    "token": {
      "type": "oauth2",
      "flow": "application",
      "tokenUrl": "https://idp.staging.driven.ca/oauth/token",
      "scopes": {
        "ztt:api": "Grants access to api"
      }
    }
  },
  "security": [
    {
      "token": []
    }
  ],
  "host": "admin.akira.staging.driven.ca",
  "basePath": "/api",
  "tags": [
    {
      "name": "guarantor_infos",
      "description": "Operations about guarantor_infos"
    },
    {
      "name": "leads",
      "description": "Operations about leads"
    },
    {
      "name": "merchant_documents",
      "description": "Operations about merchant_documents"
    },
    {
      "name": "agreements",
      "description": "Operations about agreements"
    },
    {
      "name": "pdf",
      "description": "Operations about pdfs"
    },
    {
      "name": "codat_connections",
      "description": "Operations about codat_connections"
    },
    {
      "name": "reset",
      "description": "Operations about resets"
    },
    {
      "name": "tracked_objects",
      "description": "Operations about tracked_objects"
    },
    {
      "name": "transactions",
      "description": "Operations about transactions"
    },
    {
      "name": "social_connections",
      "description": "Operations about social_connections"
    },
    {
      "name": "marketing",
      "description": "Operations about marketings"
    },
    {
      "name": "bank_connections",
      "description": "Operations about bank_connections"
    },
    {
      "name": "promotions",
      "description": "Operations about promotions"
    },
    {
      "name": "promotion_enrollments",
      "description": "Operations about promotion_enrollments"
    },
    {
      "name": "emails",
      "description": "Operations about emails"
    },
    {
      "name": "common",
      "description": "Utility APIs"
    },
    {
      "name": "merchants",
      "description": "APIs to manage merchant information"
    },
    {
      "name": "applicants",
      "description": "APIs to manage applicant information"
    },
    {
      "name": "suppliers",
      "description": "APIs to manage suppliers"
    },
    {
      "name": "lending",
      "description": "Lending operations, for example Unsecured Business Loans"
    },
    {
      "name": "financing",
      "description": "Financing operations, for example Merchant Cash Advances"
    }
  ],
  "paths": {
    "/common/uploads": {
      "post": {
        "description": "API to obtain a pre-signed URL for uploading a file",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "API to obtain a pre-signed URL for uploading a file",
            "schema": {
              "$ref": "#/definitions/Upload"
            }
          }
        },
        "tags": [
          "common"
        ],
        "operationId": "createUploadUrl"
      }
    },
    "/common/bank_accounts": {
      "post": {
        "summary": "Create bank account",
        "description": "Creates a bank account",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "bank_account",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/postCommonBankAccounts"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Create bank account",
            "schema": {
              "$ref": "#/definitions/CommonBankAccount"
            }
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "common"
        ],
        "operationId": "createBankAccount"
      },
      "get": {
        "summary": "Get bank accounts",
        "description": "Returns a list of bank accounts associated with the merchant",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "owner_guid",
            "description": "Merchant ID",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "source",
            "description": "Source",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "group",
            "description": "Group accounts regardless of source",
            "type": "boolean",
            "required": false
          },
          {
            "in": "query",
            "name": "filter_unused",
            "description": "Filters out bank accounts with unused status",
            "type": "boolean",
            "required": false
          },
          {
            "in": "query",
            "name": "filter_manual",
            "description": "Filters out bank accounts with manual source",
            "type": "boolean",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Get bank accounts",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CommonBankAccount"
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "common"
        ],
        "operationId": "getBankAccounts"
      }
    },
    "/common/bank_accounts/{id}": {
      "delete": {
        "summary": "Delete bank account",
        "description": "Delete bank account",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Bank Account ID",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Delete bank account",
            "schema": {
              "$ref": "#/definitions/CommonBankAccount"
            }
          }
        },
        "tags": [
          "common"
        ],
        "operationId": "deleteBankAccount"
      },
      "put": {
        "summary": "Update bank account",
        "description": "Update bank account",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Bank Account ID",
            "type": "string",
            "required": true
          },
          {
            "name": "bank_account",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/putCommonBankAccounts"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Update bank account",
            "schema": {
              "$ref": "#/definitions/CommonBankAccount"
            }
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "common"
        ],
        "operationId": "updateBankAccount"
      },
      "get": {
        "summary": "Get bank account",
        "description": "Get bank account",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Bank Account ID",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Get bank account",
            "schema": {
              "$ref": "#/definitions/CommonBankAccount"
            }
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "common"
        ],
        "operationId": "getBankAccount"
      }
    },
    "/merchants": {
      "get": {
        "summary": "Get merchants",
        "description": "Get a list of merchants registered to your partner organization. \n\nIf desired, specify the number of records ('count') and starting record number ('start').",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "start",
            "description": "start position of the merchant list",
            "type": "integer",
            "format": "int32",
            "default": 0,
            "required": false
          },
          {
            "in": "query",
            "name": "count",
            "description": "number of merchant records to be returned in the response",
            "type": "integer",
            "format": "int32",
            "default": 1000,
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Get merchants",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Merchant"
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "tags": [
          "merchants"
        ],
        "operationId": "getListOfMerchants",
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "https://staging.driven.ca/api/merchants?start=0&count=100"
          },
          {
            "lang": "Ruby",
            "source": "Ruby source goes here"
          }
        ]
      },
      "post": {
        "description": "Create a merchant",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "merchant",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/postMerchants"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Create a merchant",
            "schema": {
              "$ref": "#/definitions/Merchant"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "tags": [
          "merchants"
        ],
        "operationId": "createMerchant"
      }
    },
    "/merchants/{id}/flinks_transactions_refresh": {
      "post": {
        "summary": "refreshes flinks transactions for insights",
        "description": "Description of the merchant API\n",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Merchant ID",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "refreshes flinks transactions for insights",
            "schema": {
              "$ref": "#/definitions/Merchant"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "tags": [
          "merchants"
        ],
        "operationId": "refreshFlinksTransactions"
      }
    },
    "/merchants/{id}/refresh_offers": {
      "post": {
        "summary": "refresh offers for a merchant",
        "description": "Description of the merchant API\n",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Merchant ID",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "refresh offers for a merchant",
            "schema": {
              "$ref": "#/definitions/Merchant"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "tags": [
          "merchants"
        ],
        "operationId": "postMerchantRefreshOffers"
      }
    },
    "/merchants/{id}/selected_insights_bank_accounts": {
      "post": {
        "summary": "posts select bank accounts for insights for merchant",
        "description": "Description of the merchant API\n",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Merchant ID",
            "type": "string",
            "required": true
          },
          {
            "in": "body",
            "name": "bank_account_ids",
            "description": "Selected insights bank accounts array.",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "posts select bank accounts for insights for merchant",
            "schema": {
              "$ref": "#/definitions/Merchant"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "tags": [
          "merchants"
        ],
        "operationId": "postMerchantSelectedInsightsBankAccounts"
      }
    },
    "/merchants/{id}/selected_sales_volume_accounts": {
      "post": {
        "summary": "posts select bank accounts for sales volumes for merchant",
        "description": "Description of the merchant API\n",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Merchant ID",
            "type": "string",
            "required": true
          },
          {
            "name": "selected_bank_accounts",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/postMerchantsIdSelectedSalesVolumeAccounts"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "posts select bank accounts for sales volumes for merchant",
            "schema": {
              "$ref": "#/definitions/Merchant"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "tags": [
          "merchants"
        ],
        "operationId": "postMerchantSelectedSalesVolumeAccounts"
      }
    },
    "/merchants/{id}/select_bank_account": {
      "post": {
        "summary": "posts select bank account for merchant",
        "description": "Description of the merchant API\n",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Merchant ID",
            "type": "string",
            "required": true
          },
          {
            "name": "select_bank_account",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/postMerchantsIdSelectBankAccount"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "posts select bank account for merchant",
            "schema": {
              "$ref": "#/definitions/Merchant"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "tags": [
          "merchants"
        ],
        "operationId": "postMerchantSelectBankAccount"
      }
    },
    "/merchants/{id}/create_bank_account": {
      "post": {
        "summary": "create bank account for merchant",
        "description": "Description of the merchant API\n",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Merchant ID",
            "type": "string",
            "required": true
          },
          {
            "name": "create_bank_account",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/postMerchantsIdCreateBankAccount"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "create bank account for merchant",
            "schema": {
              "$ref": "#/definitions/Merchant"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "tags": [
          "merchants"
        ],
        "operationId": "postMerchantCreateBankAccount"
      }
    },
    "/merchants/{id}": {
      "put": {
        "description": "updates a merchant",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Merchant ID",
            "type": "string",
            "required": true
          },
          {
            "name": "merchant",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/putMerchants"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "updates a merchant",
            "schema": {
              "$ref": "#/definitions/Merchant"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "tags": [
          "merchants"
        ],
        "operationId": "updateMerchant"
      },
      "get": {
        "summary": "returns a merchant",
        "description": "Description of the merchant API\n",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Merchant ID",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "returns a merchant",
            "schema": {
              "$ref": "#/definitions/Merchant"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "tags": [
          "merchants"
        ],
        "operationId": "getMerchant"
      }
    },
    "/merchant_queries": {
      "post": {
        "summary": "Performs merchant queries using business lookup services",
        "description": "Allows clients to query merchant information in the business lookup service using information provided by the merchant.\nTo perform a search a query needs to be created by calling this API. The api will return a list of results together with a query_id value. When one of the results was selected as the matching merchant info a second call will be done to \"POST .../merchant_queries/:query_id/select\" specifying the selected result in the body.\n",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "query",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/postMerchantQueries"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Performs merchant queries using business lookup services",
            "schema": {
              "$ref": "#/definitions/MerchantQuery"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "tags": [
          "merchants"
        ],
        "operationId": "submitMerchantQuery"
      }
    },
    "/merchant_queries/{query_id}/select": {
      "post": {
        "summary": "Selects one of the results from the specified query to be used for creating a new merchant",
        "description": "Selects one of the results from the specified query to be used for creating a new merchant",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "query_id",
            "description": "Merchant query ID",
            "type": "string",
            "required": true
          },
          {
            "name": "queryResultId",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/postMerchantQueriesQueryIdSelect"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Selects one of the results from the specified query to be used for creating a new merchant",
            "schema": {
              "$ref": "#/definitions/Merchant"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "tags": [
          "merchants"
        ],
        "operationId": "selectMerchantQueryResult"
      }
    },
    "/applicants": {
      "post": {
        "description": "Create an applicant",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "applicant",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/postApplicants"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Create an applicant",
            "schema": {
              "$ref": "#/definitions/Applicant"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "tags": [
          "applicants"
        ],
        "operationId": "createApplicant"
      }
    },
    "/applicants/{guid}/authenticate": {
      "put": {
        "summary": "API for completing applicant authentication",
        "description": "This API is used to check the applicant supplied answers against the correct answers.",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "guid",
            "type": "integer",
            "format": "int32",
            "required": true
          },
          {
            "name": "ApplicantsGuidAuthenticate",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/putApplicantsGuidAuthenticate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API for completing applicant authentication",
            "schema": {
              "$ref": "#/definitions/Individuals_Authentication_ResponseEntity"
            }
          },
          "400": {
            "description": "Authentication query not found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Applicant not found"
          },
          "500": {
            "description": "The Equifax eID service returned an internal server error"
          },
          "503": {
            "description": "The Equifax eID service is unavailable"
          }
        },
        "tags": [
          "applicants"
        ],
        "operationId": "completeApplicantAuthentication"
      },
      "post": {
        "summary": "API for initiating applicant authentication",
        "description": "This API is used to get an applicant's authentication questions.",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "guid",
            "type": "integer",
            "format": "int32",
            "required": true
          },
          {
            "name": "ApplicantsGuidAuthenticate",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/postApplicantsGuidAuthenticate"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "API for initiating applicant authentication",
            "schema": {
              "$ref": "#/definitions/Individuals_Authentication_QueryEntity"
            }
          },
          "400": {
            "description": "KYC error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Applicant not found"
          },
          "422": {
            "description": "The applicant failed authentication"
          },
          "500": {
            "description": "The Equifax eID service returned an internal server error"
          },
          "503": {
            "description": "The Equifax eID service is unavailable"
          }
        },
        "tags": [
          "applicants"
        ],
        "operationId": "initiateApplicantAuthentication"
      }
    },
    "/guarantor_infos": {
      "post": {
        "description": "Create a guarantor information",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "guarantor",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/postGuarantorInfos"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Create a guarantor information",
            "schema": {
              "$ref": "#/definitions/GuarantorInfo"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "tags": [
          "guarantor_infos"
        ],
        "operationId": "createGuarantor"
      }
    },
    "/leads": {
      "get": {
        "description": "Get leads",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "external_id",
            "description": "Lead external identifier",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "applicant_id",
            "description": "Linked to an applicant with kyc_guid",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "applicant_email",
            "description": "Linked to an applicant with email",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "partner_id",
            "description": "Partner ID",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "description": "The zero-based offset of the leads",
            "type": "integer",
            "format": "int32",
            "default": 0,
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "description": "The maximum number of results to return",
            "type": "integer",
            "format": "int32",
            "default": 10,
            "required": false
          },
          {
            "in": "query",
            "name": "order_by",
            "description": "The field to order results by",
            "type": "string",
            "default": "created_at",
            "required": false
          },
          {
            "in": "query",
            "name": "order_direction",
            "description": "The direction to order results by",
            "type": "string",
            "default": "asc",
            "enum": [
              "asc",
              "desc"
            ],
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Get leads",
            "schema": {
              "$ref": "#/definitions/LeadsListingEntity"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "tags": [
          "leads"
        ],
        "operationId": "getLeads"
      },
      "post": {
        "description": "Create a lead",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "lead",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/postLeads"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Create a lead",
            "schema": {
              "$ref": "#/definitions/Lead"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "tags": [
          "leads"
        ],
        "operationId": "createLead"
      }
    },
    "/leads/{id}/flinks_transactions_refresh": {
      "post": {
        "summary": "refreshes flinks transactions for insights",
        "description": "Description of the Leads API\n",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Lead Guid",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "refreshes flinks transactions for insights",
            "schema": {
              "$ref": "#/definitions/Lead"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "tags": [
          "leads"
        ],
        "operationId": "refreshFlinksTransactions"
      }
    },
    "/leads/{id}/desired_bank_account_balance": {
      "put": {
        "summary": "update a lead's desired bank account balance",
        "description": "Description of the Leads API\n",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Lead Guid",
            "type": "string",
            "required": true
          },
          {
            "name": "LeadsIdDesiredBankAccountBalance",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/putLeadsIdDesiredBankAccountBalance"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "update a lead's desired bank account balance",
            "schema": {
              "$ref": "#/definitions/Lead"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "tags": [
          "leads"
        ],
        "operationId": "updateDesiredBankAccountBalance"
      }
    },
    "/leads/{id}/selected_insights_accounts": {
      "post": {
        "summary": "update a lead's selected insights bank accounts",
        "description": "Description of the Leads API\n",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Lead Guid",
            "type": "string",
            "required": true
          },
          {
            "in": "body",
            "name": "bank_account_ids",
            "description": "Selected insights bank accounts array.",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "update a lead's selected insights bank accounts",
            "schema": {
              "$ref": "#/definitions/Lead"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "tags": [
          "leads"
        ],
        "operationId": "postSelectedInsightsAccounts"
      }
    },
    "/leads/{id}": {
      "patch": {
        "summary": "update a lead",
        "description": "Description of the Leads API\n",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Lead Guid",
            "type": "string",
            "required": true
          },
          {
            "name": "Leads",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/patchLeads"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "update a lead",
            "schema": {
              "$ref": "#/definitions/Lead"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "tags": [
          "leads"
        ],
        "operationId": "updateLead"
      },
      "get": {
        "summary": "returns a lead",
        "description": "Description of the Leads API\n",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Lead Guid",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "returns a lead",
            "schema": {
              "$ref": "#/definitions/Lead"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "tags": [
          "leads"
        ],
        "operationId": "getLead"
      }
    },
    "/merchant_documents": {
      "get": {
        "summary": "Get a listing of documents uploaded by the merchant",
        "description": "APIs to manage merchant documents\n",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "offset",
            "description": "The zero-based offset of the transactions",
            "type": "integer",
            "format": "int32",
            "default": 0,
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "description": "The maximum number of results to return",
            "type": "integer",
            "format": "int32",
            "default": 10,
            "required": false
          },
          {
            "in": "query",
            "name": "order_by",
            "description": "The field to order results by",
            "type": "string",
            "default": "created_at",
            "required": false
          },
          {
            "in": "query",
            "name": "order_direction",
            "description": "The direction to order results by",
            "type": "string",
            "default": "desc",
            "required": false
          },
          {
            "in": "query",
            "name": "upload_start_time",
            "description": "Optional filter by upload time lower bound",
            "type": "string",
            "format": "date-time",
            "default": null,
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Get a listing of documents uploaded by the merchant",
            "schema": {
              "$ref": "#/definitions/MerchantDocumentsListingEntity"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "tags": [
          "merchant_documents"
        ],
        "operationId": "getMerchantDocuments"
      }
    },
    "/suppliers": {
      "get": {
        "summary": "Get suppliers",
        "description": "Get a list of suppliers registered to your partner organization. \n\nIf desired, specify the number of records ('count') and starting record number ('start').",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "start",
            "description": "start position of the merchant list",
            "type": "integer",
            "format": "int32",
            "default": 0,
            "required": false
          },
          {
            "in": "query",
            "name": "count",
            "description": "number of merchant records to be returned in the response",
            "type": "integer",
            "format": "int32",
            "default": 1000,
            "required": false
          },
          {
            "in": "query",
            "name": "search_string",
            "description": "case insensitive search string",
            "type": "string",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Get suppliers",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Supplier"
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "tags": [
          "suppliers"
        ],
        "operationId": "getListOfSuppliers",
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "https://staging.driven.ca/api/suppliers?start=0&count=100"
          },
          {
            "lang": "Ruby",
            "source": "Ruby source goes here"
          }
        ]
      },
      "post": {
        "summary": "API for managing suppliers.",
        "description": "This API is used to create new suppliers for a given partner.",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "supplier",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/postSuppliers"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "API for managing suppliers.",
            "schema": {
              "$ref": "#/definitions/Supplier"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Supplier"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Supplier"
            }
          },
          "422": {
            "description": "Invalid parameter entry",
            "schema": {
              "$ref": "#/definitions/Supplier"
            }
          }
        },
        "tags": [
          "suppliers"
        ],
        "operationId": "createSuppliers"
      }
    },
    "/suppliers/{guid}": {
      "get": {
        "summary": "API for managing suppliers.",
        "description": "This API is used to get an existing supplier.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "guid",
            "description": "The supplier GUID.",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "id",
            "description": "The supplier ID.",
            "type": "string",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "API for managing suppliers.",
            "schema": {
              "$ref": "#/definitions/Supplier"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Supplier"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Supplier"
            }
          },
          "404": {
            "description": "Supplier not found",
            "schema": {
              "$ref": "#/definitions/Supplier"
            }
          }
        },
        "tags": [
          "suppliers"
        ],
        "operationId": "getSupplier"
      }
    },
    "/agreements/{id}/decline": {
      "put": {
        "summary": "user decline agreement",
        "description": "User decline agreement, requires user's ip address \n\nUpdates state, declined_ip_address, declined_date, and user_guid of agreement",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "ip_address",
            "description": "IP address of the user declining the agreement",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "user decline agreement",
            "schema": {
              "$ref": "#/definitions/Agreement"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "tags": [
          "agreements"
        ],
        "operationId": "decline"
      }
    },
    "/agreements/{id}/opt_out": {
      "put": {
        "summary": "user opt_out agreement",
        "description": "User opt-out of agreement, requires user's ip address \n\nUpdates state, opt_out_ip_address, opt_out_date, and user_guid of agreement",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "ip_address",
            "description": "IP address of the user opting out of the agreement",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "user opt_out agreement",
            "schema": {
              "$ref": "#/definitions/Agreement"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "tags": [
          "agreements"
        ],
        "operationId": "opt_out"
      }
    },
    "/agreements/{id}/accept": {
      "put": {
        "summary": "puts user accepts agreement",
        "description": "User agrees to agreement, requires user's ip address \n\nUpdates state, accepted_ip_address, accepted_date, and user_guid of agreement",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "ip_address",
            "description": "IP address of the user accepting the agreement",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "puts user accepts agreement",
            "schema": {
              "$ref": "#/definitions/Agreement"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "tags": [
          "agreements"
        ],
        "operationId": "accept"
      }
    },
    "/agreements/{id}": {
      "get": {
        "summary": "get agreement",
        "description": "Get an agreement by id",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "show_terms",
            "description": "Re-generate the terms (unless the agreement has been agreed to)",
            "type": "boolean",
            "required": false
          },
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "get agreement",
            "schema": {
              "$ref": "#/definitions/Agreement"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "tags": [
          "agreements"
        ],
        "operationId": "getAgreement"
      }
    },
    "/pdf": {
      "post": {
        "summary": "generate pdf",
        "description": "Get a pdf blob given markdown content",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "content",
            "description": "The markdown content to be converted to a pdf blob",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "generate pdf",
            "schema": {
              "$ref": "#/definitions/PdfEntity"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "tags": [
          "pdf"
        ],
        "operationId": "generatePdf"
      }
    },
    "/codat_connections": {
      "post": {
        "summary": "Create a codat company/connection for merchant and return link url",
        "description": "APIs to manage codat companies and connections\n",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "merchant_id",
            "description": "Identifier of the merchant to create company/connection for",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "platform",
            "description": "The ecommerce platform the connection is for",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Create a codat company/connection for merchant and return link url",
            "schema": {
              "$ref": "#/definitions/CodatConnectionEntity"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "tags": [
          "codat_connections"
        ],
        "operationId": "createCodatConnections"
      }
    },
    "/lending/offers": {
      "get": {
        "summary": "returns offers for a merchant",
        "description": "Lending offers contain the information required to create a loan with certain terms.\nThey are created automatically for merchants based on their financial records and external criteria set up by/for the Partner.\nIn order to approve a created offer, use the `approve` method.  This will cause the offer\nto be published for viewing by the merchant.  You can cancel this approval using the `cancel` method at any point before activation.\nTo activate an offer and start a loan, send the merchant application details via the `apply` method.\nThis will trigger the delivery of funds and the start of the repayment process.\n",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "merchant_id",
            "description": "Identifier of the merchant to query for",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "state",
            "description": "Return all and only those offers of the merchant in this state",
            "type": "string",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "returns offers for a merchant",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LendingVariableOffer"
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "417": {
            "description": "Offerination failed"
          }
        },
        "tags": [
          "lending"
        ],
        "operationId": "getOffers"
      }
    },
    "/lending/offers/{id}/fee": {
      "get": {
        "description": "Returns the fee for a Lending Offer",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Identifier of the offer",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "principal_amount",
            "description": "The amount of loan to calculate fee for",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "loan_term",
            "description": "Term of the loan in days",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "loan_term_id",
            "description": "Term id for the loan",
            "type": "string",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the fee for a Lending Offer",
            "schema": {
              "$ref": "#/definitions/LendingOfferFee"
            }
          },
          "404": {
            "description": "Not found"
          },
          "400": {
            "description": "Bad request"
          },
          "422": {
            "description": "Cannot calculate fee for this offer"
          }
        },
        "tags": [
          "lending"
        ],
        "operationId": "feeForLendingOffer"
      }
    },
    "/lending/offers/{id}/cancel": {
      "put": {
        "description": "cancels a Lending Offer",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "string",
            "required": true
          },
          {
            "in": "formData",
            "name": "supplier_id",
            "description": "Identifier of the supplier to get offer overrides for",
            "type": "string",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "cancels a Lending Offer",
            "schema": {
              "$ref": "#/definitions/LendingVariableOffer"
            }
          },
          "404": {
            "description": "Not found"
          },
          "400": {
            "description": "Bad request"
          },
          "422": {
            "description": "Offer cannot be cancelled"
          }
        },
        "tags": [
          "lending"
        ],
        "operationId": "cancelLendingOffer"
      }
    },
    "/lending/offers/{id}/approve": {
      "put": {
        "description": "approves a Lending Offer",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "string",
            "required": true
          },
          {
            "in": "formData",
            "name": "supplier_id",
            "description": "Identifier of the supplier to get offer overrides for",
            "type": "string",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "approves a Lending Offer",
            "schema": {
              "$ref": "#/definitions/LendingVariableOffer"
            }
          },
          "404": {
            "description": "Not found"
          },
          "400": {
            "description": "Bad request"
          },
          "422": {
            "description": "Offer cannot be approved"
          }
        },
        "tags": [
          "lending"
        ],
        "operationId": "approveLendingOffer"
      }
    },
    "/lending/offers/{id}": {
      "get": {
        "summary": "returns a Lending Offer",
        "description": "Lending offers contain the information required to create a loan with certain terms.\nThey are created automatically for merchants based on their financial records and external criteria set up by/for the Partner.\nIn order to approve a created offer, use the `approve` method.  This will cause the offer\nto be published for viewing by the merchant.  You can cancel this approval using the `cancel` method at any point before activation.\nTo activate an offer and start a loan, send the merchant application details via the `apply` method.\nThis will trigger the delivery of funds and the start of the repayment process.\n",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "supplier_id",
            "description": "Identifier of the supplier to get offer overrides for",
            "type": "string",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "returns a Lending Offer",
            "schema": {
              "$ref": "#/definitions/LendingVariableOffer"
            }
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "lending"
        ],
        "operationId": "getLendingOffer"
      }
    },
    "/lending/applications": {
      "post": {
        "description": "creates an application for an offer",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "lending_application",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/postLendingApplications"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "creates an application for an offer",
            "schema": {
              "$ref": "#/definitions/LendingApplication"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "tags": [
          "lending"
        ],
        "operationId": "createApplication"
      },
      "get": {
        "summary": "Get UBL applications",
        "description": "Get all the applications for a merchant",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "merchant_id",
            "description": "Identifier of the merchant to query for",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Get UBL applications",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LendingApplication"
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "tags": [
          "lending"
        ],
        "operationId": "getApplications"
      }
    },
    "/lending/applications/{id}/fee": {
      "get": {
        "description": "Returns the fee for a Application",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Identifier of the application",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "principal_amount",
            "description": "The amount of loan to calculate fee for",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "loan_term_id",
            "description": "Term id for the loan",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the fee for a Application",
            "schema": {
              "$ref": "#/definitions/LendingApplicationFee"
            }
          },
          "404": {
            "description": "Not found"
          },
          "400": {
            "description": "Bad request"
          },
          "422": {
            "description": "Cannot calculate fee for this application"
          }
        },
        "tags": [
          "lending"
        ],
        "operationId": "feeForLendingApplication"
      }
    },
    "/lending/applications/{id}/terms": {
      "get": {
        "description": "gets the terms and conditions that belong to a campaign as text",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "gets the terms and conditions that belong to a campaign as text",
            "schema": {
              "$ref": "#/definitions/Terms"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "tags": [
          "lending"
        ],
        "operationId": "getCampaignTerms"
      }
    },
    "/lending/applications/{id}/pad_agreement": {
      "get": {
        "description": "gets the PAD Agreement that belongs to this application as text",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "gets the PAD Agreement that belongs to this application as text",
            "schema": {
              "$ref": "#/definitions/Agreement"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "tags": [
          "lending"
        ],
        "operationId": "getPADAgreement"
      }
    },
    "/lending/applications/{id}/cancel": {
      "put": {
        "description": "cancels an application",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID",
            "type": "string",
            "required": true
          },
          {
            "in": "formData",
            "name": "cancellation_reason",
            "description": "Reason for cancelling the application",
            "type": "string",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "cancels an application",
            "schema": {
              "$ref": "#/definitions/LendingApplication"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "tags": [
          "lending"
        ],
        "operationId": "cancelApplication"
      }
    },
    "/lending/applications/{id}/accept": {
      "put": {
        "description": "accepts an application and its terms",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID",
            "type": "string",
            "required": true
          },
          {
            "in": "formData",
            "name": "ubl_terms_agreed",
            "description": "Agreement to the UBL terms",
            "type": "string",
            "required": true
          },
          {
            "in": "formData",
            "name": "pad_terms_agreed",
            "description": "Agreement to the PAD terms",
            "type": "string",
            "required": true
          },
          {
            "in": "formData",
            "name": "ip_address",
            "description": "Ip Address of the client agreeing",
            "type": "string",
            "required": true
          },
          {
            "in": "formData",
            "name": "payor_account_id",
            "description": "Identifier of which account the payor selected for this loan",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "payee_id",
            "description": "Identifier of the payee of this loan",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "payee_account_num",
            "description": "Account number for this application (if applicable)",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "payee_invoice_num",
            "description": "Invoice number for this application (if applicable)",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "signature_document_id",
            "description": "Merchant document containing contract signature",
            "type": "string",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "accepts an application and its terms",
            "schema": {
              "$ref": "#/definitions/LendingApplication"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "tags": [
          "lending"
        ],
        "operationId": "acceptApplication"
      }
    },
    "/lending/applications/{id}/amend": {
      "put": {
        "description": "amends an application amount or duration",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID",
            "type": "string",
            "required": true
          },
          {
            "in": "formData",
            "name": "principal_amount",
            "description": "Amount of the loan",
            "type": "number",
            "format": "float",
            "required": true
          },
          {
            "in": "formData",
            "name": "loan_term_id",
            "description": "The loan term chosen",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "amends an application amount or duration",
            "schema": {
              "$ref": "#/definitions/LendingApplication"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "tags": [
          "lending"
        ],
        "operationId": "amendApplication"
      }
    },
    "/lending/applications/{id}": {
      "get": {
        "description": "gets an application",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "gets an application",
            "schema": {
              "$ref": "#/definitions/LendingApplication"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "tags": [
          "lending"
        ],
        "operationId": "getApplication"
      }
    },
    "/lending/ubls": {
      "get": {
        "summary": "returns loans",
        "description": " This API contain the information required to manage a Loan.\n\n It links to zero or more Repayment objects representing the various repayments\n that have been processed in the context of that Ubl\n\n ## Lifecycle of an loan:\n A lending loan starts in the 'pending' state, and stays this way until the funds\n have been sent to the merchant.\n  Once the funds have been sent, the loan goes to the 'repaying' state.\n The various repayments get created and the loan stays in the repaying state.\n  The last repayment will transition the state from 'repaying' to 'last_repayment', and\n if successful will finalize the state to 'complete'.\n  ## Lifecycle of an repayment:\n First, a repayment for a given day of receipts is computed, creating the repayment in the\n'pending' state. This repayment can be edited by changing the receipt amount, but when the number\n funds transfer are initiated the repayment should transition to the 'transferring' state.\n  Depending on whether the repayment is successful or not, the repayment state transitions to\n 'transferred' or 'failed'\n",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "merchant_id",
            "description": "Merchant ID",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "offer_type",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "num_of_upcoming_payments",
            "type": "integer",
            "format": "int32",
            "required": false
          },
          {
            "in": "query",
            "name": "initial_upcoming_payments",
            "type": "boolean",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "returns loans",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LendingUbl"
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "lending"
        ],
        "operationId": "getUbls"
      }
    },
    "/lending/ubls/{id}/amortization_schedules": {
      "post": {
        "summary": "returns an amortization schedule report",
        "description": " This API contain the information required to manage a Loan.\n\n It links to zero or more Repayment objects representing the various repayments\n that have been processed in the context of that Ubl\n\n ## Lifecycle of an loan:\n A lending loan starts in the 'pending' state, and stays this way until the funds\n have been sent to the merchant.\n  Once the funds have been sent, the loan goes to the 'repaying' state.\n The various repayments get created and the loan stays in the repaying state.\n  The last repayment will transition the state from 'repaying' to 'last_repayment', and\n if successful will finalize the state to 'complete'.\n  ## Lifecycle of an repayment:\n First, a repayment for a given day of receipts is computed, creating the repayment in the\n'pending' state. This repayment can be edited by changing the receipt amount, but when the number\n funds transfer are initiated the repayment should transition to the 'transferring' state.\n  Depending on whether the repayment is successful or not, the repayment state transitions to\n 'transferred' or 'failed'\n",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Ubl ID",
            "type": "string",
            "required": true
          },
          {
            "in": "formData",
            "name": "initial",
            "type": "boolean",
            "required": false
          }
        ],
        "responses": {
          "201": {
            "description": "returns an amortization schedule report",
            "schema": {
              "$ref": "#/definitions/LendingUbl"
            }
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "lending"
        ],
        "operationId": "schedules"
      }
    },
    "/lending/ubls/{id}": {
      "get": {
        "summary": "returns a loan",
        "description": " This API contain the information required to manage a Loan.\n\n It links to zero or more Repayment objects representing the various repayments\n that have been processed in the context of that Ubl\n\n ## Lifecycle of an loan:\n A lending loan starts in the 'pending' state, and stays this way until the funds\n have been sent to the merchant.\n  Once the funds have been sent, the loan goes to the 'repaying' state.\n The various repayments get created and the loan stays in the repaying state.\n  The last repayment will transition the state from 'repaying' to 'last_repayment', and\n if successful will finalize the state to 'complete'.\n  ## Lifecycle of an repayment:\n First, a repayment for a given day of receipts is computed, creating the repayment in the\n'pending' state. This repayment can be edited by changing the receipt amount, but when the number\n funds transfer are initiated the repayment should transition to the 'transferring' state.\n  Depending on whether the repayment is successful or not, the repayment state transitions to\n 'transferred' or 'failed'\n",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Ubl ID",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "returns a loan",
            "schema": {
              "$ref": "#/definitions/LendingUbl"
            }
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "lending"
        ],
        "operationId": "getLendingUbl"
      }
    },
    "/lending/repayments": {
      "get": {
        "summary": "Get loan repayments",
        "description": "Get all the repayments for a particular loan or merchant",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "ubl_id",
            "description": "Lending Ubl id",
            "type": "string",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Get loan repayments",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LendingRepayment"
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "lending"
        ],
        "operationId": "getRepayments"
      }
    },
    "/lending/repayments/{id}": {
      "get": {
        "description": "Gets a repayment",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Repayment ID",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Gets a repayment",
            "schema": {
              "$ref": "#/definitions/LendingRepayment"
            }
          },
          "404": {
            "description": "Repayment or ubl not found"
          }
        },
        "tags": [
          "lending"
        ],
        "operationId": "getLendingUblRepayment"
      }
    },
    "/reset": {
      "post": {
        "summary": "Reset the sandbox environment",
        "description": "This API is used to reset the sandbox environment for the given partner. Calling this API in production returns a 400.",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Reset the sandbox environment"
          }
        },
        "tags": [
          "reset"
        ],
        "operationId": "reset"
      }
    },
    "/tracked_objects/{id}/tracked_object_events": {
      "get": {
        "summary": "Get a listing of tracked object events",
        "description": "APIs to manage invite tracking\n",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The tracked object id",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "offset",
            "description": "The zero-based offset of the tracked object event list",
            "type": "integer",
            "format": "int32",
            "default": 0,
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "description": "The maximum number of results to return",
            "type": "integer",
            "format": "int32",
            "default": 10,
            "required": false
          },
          {
            "in": "query",
            "name": "order_by",
            "description": "The field to order results by",
            "type": "string",
            "default": "created_at",
            "required": false
          },
          {
            "in": "query",
            "name": "order_direction",
            "description": "The direction to order results by",
            "type": "string",
            "default": "desc",
            "required": false
          },
          {
            "in": "query",
            "name": "filter",
            "description": "Search string to filter results by",
            "type": "string",
            "default": null,
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Get a listing of tracked object events",
            "schema": {
              "$ref": "#/definitions/TrackedObjectEventListingEntity"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "tags": [
          "tracked_objects"
        ],
        "operationId": "getTrackedObjectEvents"
      }
    },
    "/transactions": {
      "get": {
        "summary": "Get a listing of transactions",
        "description": "APIs to manage transactions\n",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "offset",
            "description": "The zero-based offset of the transactions",
            "type": "integer",
            "format": "int32",
            "default": 0,
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "description": "The maximum number of results to return",
            "type": "integer",
            "format": "int32",
            "default": 10,
            "required": false
          },
          {
            "in": "query",
            "name": "order_by",
            "description": "The field to order results by",
            "type": "string",
            "default": "created_at",
            "required": false
          },
          {
            "in": "query",
            "name": "order_direction",
            "description": "The direction to order results by",
            "type": "string",
            "default": "desc",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Get a listing of transactions",
            "schema": {
              "$ref": "#/definitions/TransactionsListingEntity"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "tags": [
          "transactions"
        ],
        "operationId": "getTransactionHistory"
      }
    },
    "/social_connections": {
      "get": {
        "summary": "Get the status of the merchant social connections",
        "description": "APIs to manage social connections\n",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get the status of the merchant social connections",
            "schema": {
              "$ref": "#/definitions/SocialConnectionsEntity"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "tags": [
          "social_connections"
        ],
        "operationId": "getSocialConnections"
      }
    },
    "/social_connections/facebook": {
      "delete": {
        "description": "Revoke access of the Ario Platform application from Facebook",
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Revoke access of the Ario Platform application from Facebook"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "tags": [
          "social_connections"
        ],
        "operationId": "deleteFacebookSocialConnection"
      }
    },
    "/marketing/campaigns": {
      "post": {
        "summary": "schedule a marketing campaign",
        "description": "Schedule marketing campaign",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "scheduled_at",
            "description": "Date and time when the campaign is scheduled to run (for now always at 11:00 AM EST)",
            "type": "string",
            "format": "date-time",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "schedule a marketing campaign",
            "schema": {
              "$ref": "#/definitions/MarketingCampaign"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "tags": [
          "marketing"
        ],
        "operationId": "createMarketingCampaign"
      },
      "get": {
        "summary": "get marketing campaigns",
        "description": "Get a listing of marketing campaigns",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "offset",
            "description": "The zero-based offset of the marketing campaigns list",
            "type": "integer",
            "format": "int32",
            "default": 0,
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "description": "The maximum number of results to return",
            "type": "integer",
            "format": "int32",
            "default": 10,
            "required": false
          },
          {
            "in": "query",
            "name": "order_by",
            "description": "The field to order results by",
            "type": "string",
            "default": "created_at",
            "required": false
          },
          {
            "in": "query",
            "name": "order_direction",
            "description": "The direction to order results by",
            "type": "string",
            "default": "desc",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "get marketing campaigns",
            "schema": {
              "$ref": "#/definitions/MarketingCampaign"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "tags": [
          "marketing"
        ],
        "operationId": "getMarketingCampaigns"
      }
    },
    "/marketing/campaigns/{id}": {
      "delete": {
        "summary": "cancel a marketing campaign",
        "description": "Schedule marketing campaign",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The marketing campaign id",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "cancel a marketing campaign",
            "schema": {
              "$ref": "#/definitions/MarketingCampaign"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "tags": [
          "marketing"
        ],
        "operationId": "deleteMarketingCampaign"
      },
      "get": {
        "summary": "Get marketing campaign",
        "description": "Get marketing campaign",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The marketing campaign id",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Get marketing campaign",
            "schema": {
              "$ref": "#/definitions/MarketingCampaign"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "tags": [
          "marketing"
        ],
        "operationId": "getMarketingCampaign"
      }
    },
    "/bank_connections": {
      "get": {
        "summary": "Returns bank connections for bank account owner",
        "description": "API to manage bank connection information\n",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "lead_id",
            "description": "Lead id",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "merchant_id",
            "description": "Merchant id",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "source",
            "description": "source of the bank connection",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "product_type",
            "description": "Product type for the bank connection",
            "type": "string",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Returns bank connections for bank account owner",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BankConnectionEntity"
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal error"
          }
        },
        "tags": [
          "bank_connections"
        ],
        "operationId": "getBankConnections"
      }
    },
    "/bank_connections/{id}": {
      "get": {
        "summary": "get bank connection",
        "description": "Get a bank connection by id",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "get bank connection",
            "schema": {
              "$ref": "#/definitions/BankConnectionEntity"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal error"
          }
        },
        "tags": [
          "bank_connections"
        ],
        "operationId": "getBankConnection"
      }
    },
    "/promotions": {
      "get": {
        "summary": "Get promotions available for user",
        "description": "Get a list of promotions",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "promotion_code",
            "description": "Promotion code",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "lead_id",
            "description": "Lead id",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "merchant_id",
            "description": "Merchant id",
            "type": "string",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Get promotions available for user",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PromotionEntity"
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "tags": [
          "promotions"
        ],
        "operationId": "getPromotions"
      }
    },
    "/promotions/{id}/optin": {
      "post": {
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "created Optin"
          }
        },
        "tags": [
          "promotions"
        ],
        "operationId": "promotionOptin"
      }
    },
    "/promotion_enrollments": {
      "get": {
        "summary": "Get promotion entries",
        "description": "Get a list of promotion entries",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "promotion_code",
            "description": "Promotion code",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "promotion_id",
            "description": "Promotion id",
            "type": "string",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Get promotion entries",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PromotionEnrollmentEntity"
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "tags": [
          "promotion_enrollments"
        ],
        "operationId": "getPromotionEntries"
      }
    },
    "/promotion_enrollments/{id}/optout": {
      "post": {
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "created Optout"
          }
        },
        "tags": [
          "promotion_enrollments"
        ],
        "operationId": "optoutPromotionEnrollment"
      }
    },
    "/promotion_enrollments/{id}/redeem": {
      "post": {
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "created Redeem"
          }
        },
        "tags": [
          "promotion_enrollments"
        ],
        "operationId": "redeemPromotionEnrollment"
      }
    },
    "/emails/{email_address}/subscribe": {
      "post": {
        "summary": "subscribe an email address from marketing",
        "description": "Management API for email operations\n",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "email_address",
            "description": "The email",
            "type": "string",
            "required": true
          },
          {
            "in": "formData",
            "name": "performing_user_id",
            "description": "id of the performing user",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "subscribe an email address from marketing"
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "tags": [
          "emails"
        ],
        "operationId": "subscribeEmail"
      }
    },
    "/emails/{email_address}/unsubscribe": {
      "post": {
        "summary": "unsubscribe an email address from marketing",
        "description": "Management API for email operations\n",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "email_address",
            "description": "The email",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "unsubscribe an email address from marketing"
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "tags": [
          "emails"
        ],
        "operationId": "unsubscribeEmail"
      }
    }
  },
  "definitions": {
    "Supplier": {
      "type": "object",
      "properties": {
        "guid": {
          "type": "string",
          "description": "The supplier's GUID"
        },
        "id": {
          "type": "string",
          "description": "The supplier's ID"
        },
        "supplier_url": {
          "type": "string",
          "description": "The Supplier's url"
        },
        "name": {
          "type": "string",
          "description": "The supplier's name"
        },
        "conf_extended_terms": {
          "type": "boolean",
          "example": false,
          "description": "Whether or not this partner offers extended terms for borrowers"
        }
      },
      "description": "Supplier model"
    },
    "Campaign": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "cp_3YbaCaJoUmH5U1cN",
          "description": "Campaign ID"
        },
        "name": {
          "type": "string",
          "example": "Christmas Campaign",
          "description": "Campaign"
        },
        "description": {
          "type": "string",
          "example": "Focus on jewelers",
          "description": "Campaign description"
        },
        "partner_id": {
          "type": "integer",
          "format": "int32",
          "example": "54326",
          "description": "ID of the Partner"
        },
        "product_type": {
          "type": "string",
          "example": "WCA",
          "description": "Product type"
        },
        "total_capital": {
          "type": "number",
          "format": "double",
          "example": "250_000",
          "description": "total capital for the campaign"
        },
        "currency": {
          "type": "string",
          "default": "CAD",
          "example": "CAD",
          "description": "Currency ISO code"
        },
        "start_date": {
          "type": "string",
          "format": "date-time",
          "example": "2017-12-01",
          "description": "Campaign start date"
        },
        "end_date": {
          "type": "string",
          "format": "date-time",
          "example": "2017-12-31",
          "description": "Campaign end date"
        },
        "max_merchants": {
          "type": "integer",
          "format": "int32",
          "example": 50,
          "description": "Maximum number of merchants to participate the campaign"
        },
        "min_amount": {
          "type": "number",
          "format": "double",
          "example": 1000,
          "description": "minimum account for an offer"
        },
        "max_amount": {
          "type": "number",
          "format": "double",
          "example": 250000,
          "description": "maximum amount for an offer"
        },
        "remittance_rates": {
          "type": "string",
          "example": "0.15, 0.20, 0.25",
          "description": "Remittance rate (percentage of the sales that will be collected)"
        },
        "state": {
          "type": "string",
          "example": "active",
          "description": "State of the campaign"
        },
        "terms_template": {
          "type": "string",
          "example": "terms",
          "description": "Terms and conditions of the campaign"
        }
      }
    },
    "Ledger_AccountEntity": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "a_R8mEo3dviz9VPvY8",
          "description": "id"
        },
        "name": {
          "type": "string",
          "example": "Name of customer account",
          "description": "Account name"
        },
        "country_code": {
          "type": "string",
          "default": "CA",
          "example": "US",
          "description": "ISO3166 code of the country where the bank account is domiciled"
        }
      }
    },
    "Ledger_TransactionEntity": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "t_MTGxnEbKUqHgP3tV",
          "description": "id"
        },
        "account_id": {
          "type": "string",
          "example": "a_mhKSQLuH97Frhp5r",
          "description": "Account ID"
        },
        "amount": {
          "type": "number",
          "format": "double",
          "example": "1.23",
          "description": "Value of the initial advance"
        },
        "currency": {
          "type": "string",
          "enum": [
            "CAD",
            "USD"
          ],
          "default": "CAD",
          "example": "CAD",
          "description": "Currency ISO code of the advance"
        },
        "refnum": {
          "type": "string",
          "example": "12345-6789",
          "description": "Reference number"
        },
        "memo": {
          "type": "string",
          "example": "Memo for transaction",
          "description": "Memo"
        },
        "posted_at": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp of posting"
        },
        "initiated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp of initiation"
        },
        "available_at": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp when funds are available"
        }
      }
    },
    "TrackedObjectEventEntity": {
      "type": "object",
      "properties": {
        "event": {
          "type": "string",
          "example": "created",
          "description": "The event that occurred"
        },
        "created_at": {
          "type": "string",
          "format": "date",
          "example": "2019-05-31T14:49:09.920Z",
          "description": "The date the event occurred"
        }
      }
    },
    "TrackedObjectEntity": {
      "type": "object",
      "properties": {
        "object_type": {
          "type": "string",
          "example": "Applicant",
          "description": "The type of the object tracked"
        },
        "object_guid": {
          "type": "string",
          "example": "app_5eG5WVLxrU2p1zS1",
          "description": "The id of the object tracked"
        },
        "object_entity": {
          "type": "json",
          "description": "The object entity"
        }
      }
    },
    "BankAccountDetailsEntity": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "ba_123",
          "description": "Bank account ID"
        },
        "institution_name": {
          "type": "string",
          "example": "Tangerine",
          "description": "Institution name of the bank account"
        },
        "masked_account_number": {
          "type": "string",
          "example": "********7890",
          "description": "Masked account number of the bank account"
        },
        "account_uuid": {
          "type": "string",
          "example": "62cf2b28-5e87-11e8-9c2d-fa7ae01bbebc",
          "description": "Account ID from Flinks or Plaid"
        },
        "preferred_source": {
          "type": "string",
          "example": "flinks",
          "description": "Preferred Source is either Flinks or Plaid used for reconnection"
        },
        "connection_guid": {
          "type": "string",
          "example": "pli_123",
          "description": "Plaid Item identifier or Flinks Login identifier"
        },
        "reselect_account": {
          "type": "boolean",
          "example": "false",
          "description": "Indicates whether bank account should be reselected"
        }
      }
    },
    "MerchantDocumentsListingEntity": {
      "type": "object",
      "properties": {
        "offset": {
          "type": "integer",
          "format": "int32",
          "example": 10,
          "description": "The offset into the list entities"
        },
        "limit": {
          "type": "integer",
          "format": "int32",
          "example": 10,
          "description": "The maximum number of entities that could be shown"
        },
        "total_count": {
          "type": "integer",
          "format": "int32",
          "example": 10,
          "description": "The number of entities available"
        },
        "filtered_count": {
          "type": "integer",
          "format": "int32",
          "example": 10,
          "description": "The number of filtered entities available"
        },
        "order_by": {
          "type": "string",
          "example": "created_at",
          "description": "The field the data returned is ordered by"
        },
        "order_direction": {
          "type": "string",
          "example": "desc",
          "description": "The direction the data returned is ordered by"
        },
        "filter": {
          "type": "string",
          "example": "created",
          "description": "The search string used to filter results by"
        },
        "merchant_documents": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MerchantDocument"
          },
          "description": "List of merchant documents"
        }
      },
      "description": "MerchantDocumentsListingEntity model"
    },
    "MerchantDocument": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "md_iBwpNYs9hHkG2ytW",
          "description": "Merchant Document ID"
        },
        "partner_id": {
          "type": "string",
          "example": "p_QDbRiS99MWbnSr5A",
          "description": "Partner ID"
        },
        "merchant_id": {
          "type": "string",
          "example": "m_D3AekfDqFMXCcr74",
          "description": "Merchant ID"
        },
        "org_doc_name": {
          "type": "string",
          "example": "bank_statement.pdf",
          "description": "Original document name"
        },
        "doc_type": {
          "type": "string",
          "example": "uploaded_bank_statements",
          "description": "Document type"
        },
        "source_guid": {
          "type": "string",
          "example": "m_scmCx9XmQS4WUMUE",
          "description": "Guid of the source of the document upload"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "example": "2020-05-31T14:49:09.920Z",
          "description": "The date and time at which the document was created"
        },
        "uploaded_at": {
          "type": "string",
          "format": "date-time",
          "example": "2020-05-31T14:49:09.920Z",
          "description": "The date and time at which the document was uploaded at"
        },
        "uploaded_by": {
          "type": "string",
          "example": "Hello Kitty (merchant5000@hello.kitty)",
          "description": "Name of the upload source"
        }
      }
    },
    "Config_PartnerEntity": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "p_MfepVdet4sEZEQT5",
          "description": "Partner ID"
        },
        "lender_partner_id": {
          "type": "string",
          "example": "p_U6mqPmkdNJoLwin8",
          "description": "Lender Partner ID"
        },
        "subdomain": {
          "type": "string",
          "example": "acme",
          "description": "The partner's vanity subdomain"
        },
        "idp_id": {
          "type": "string",
          "example": "ip_mnntf6DjsYutRpe9",
          "description": "The ID of the partner's IdP"
        },
        "gtm_container_id": {
          "type": "string",
          "example": "GTM-XYZ",
          "description": "The partner's Google Tag Manager (GTM) Content Id"
        },
        "optimize_container_id": {
          "type": "string",
          "example": "OPT-XYZ",
          "description": "The partner's Google Optimize Container Id"
        },
        "conf_onboard_supported": {
          "type": "boolean",
          "example": "false",
          "description": "Whether or not this partner supports dynamic onboarding of merchants"
        },
        "conf_merchant_welcome": {
          "type": "boolean",
          "example": "false",
          "description": "Whether or not this partner supports showing the welcome page on the WLMP"
        },
        "conf_allow_multiple_businesses": {
          "type": "boolean",
          "example": "false",
          "description": "Whether or not this partner supports the on boarding of multiple businesses for a given user"
        },
        "mode": {
          "type": "string",
          "example": "production",
          "description": "The mode (production or sandbox) of the partner"
        },
        "endorsing_partner_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "p_Udr3uFdju5WUgCHf"
          ],
          "description": "List of endorsing partners associated with this lender. Empty if the partner is an endorsing partner"
        },
        "theme_name": {
          "type": "string",
          "example": "Generic Theme",
          "description": "The name of the dynamic theme being used"
        },
        "theme_css_url": {
          "type": "string",
          "example": "https://s3.ca-central-1.amazonaws.com/static-assets/acme_theme/styles.css",
          "description": "The URL of the CSS file for this partner (used for dynamic theming)"
        },
        "name": {
          "type": "string",
          "example": "ZetaTango Test Partner",
          "description": "The partner's name as displayed to a user"
        }
      }
    },
    "Individuals_Authentication_ResponseEntity": {
      "type": "object",
      "properties": {
        "authenticated": {
          "type": "boolean",
          "description": "The status of the authentication attempt"
        }
      },
      "description": "Individuals_Authentication_ResponseEntity model"
    },
    "Individuals_Authentication_QuestionEntity": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "The id for the question"
        },
        "question_text": {
          "type": "string",
          "description": "The text for the question"
        },
        "answers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Individuals_Authentication_AnswerEntity"
          },
          "description": "Array of multiple choice answers associated with the question"
        }
      }
    },
    "Individuals_Authentication_AnswerEntity": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "The id for the answer"
        },
        "answer_text": {
          "type": "string",
          "description": "The text for the answer option"
        },
        "correct_answer": {
          "type": "boolean",
          "description": "True if the answer is the correct answer (shown in SANDBOX mode only)"
        }
      }
    },
    "Individuals_Authentication_QueryEntity": {
      "type": "object",
      "properties": {
        "guid": {
          "type": "string",
          "description": "The guid for the collection of questions and multiple choice answers"
        },
        "questions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Individuals_Authentication_QuestionEntity"
          },
          "description": "Array of questions"
        }
      },
      "description": "Individuals_Authentication_QueryEntity model"
    },
    "CodatConnectionEntity": {
      "type": "object",
      "properties": {
        "company_id": {
          "type": "string",
          "description": "The company id"
        },
        "connection_id": {
          "type": "string",
          "description": "The connection id"
        },
        "link_url": {
          "type": "string",
          "description": "The link URL"
        },
        "platform_name": {
          "type": "string",
          "description": "The name of the platform"
        },
        "status": {
          "type": "string",
          "description": "The status of the connection"
        },
        "last_sync_ts": {
          "type": "string",
          "format": "date-time",
          "description": "The DateTime of the last sync"
        }
      },
      "description": "CodatConnectionEntity model"
    },
    "E2eEntity": {
      "type": "object",
      "properties": {
        "applicant": {
          "$ref": "#/definitions/Applicant",
          "description": "The applicant object that was created"
        },
        "merchant": {
          "$ref": "#/definitions/Merchant",
          "description": "The merchant object that was created"
        },
        "user": {
          "$ref": "#/definitions/User",
          "description": "The user object that was created"
        }
      }
    },
    "Applicant": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "app_vYY7pVhh5yMYxTLZ",
          "description": "Applicant Guid"
        },
        "first_name": {
          "type": "string",
          "example": "Joe",
          "description": "Applicant first name"
        },
        "last_name": {
          "type": "string",
          "example": "Borrower",
          "description": "Applicant last name"
        },
        "migrated_kyc_email": {
          "type": "string",
          "example": "merchant5000@hello.kitty",
          "description": "Migrated applicant KYC email"
        }
      },
      "description": "Applicant model"
    },
    "Merchant": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "m_urvhmevcNir3XMij",
          "description": "Merchant ID"
        },
        "partner_id": {
          "type": "string",
          "example": "p_7gtxwGFJvdcqxkhB",
          "description": "Partner ID"
        },
        "endorsing_partner_id": {
          "type": "string",
          "example": "p_q8HWXzkyJdcngK47",
          "description": "Endorsing partner ID"
        },
        "email": {
          "type": "string",
          "example": "user@example.com",
          "description": "Merchant email"
        },
        "partner_merchant_id": {
          "type": "string",
          "example": "54326",
          "description": "Merchant ID used by the partner"
        },
        "business_num": {
          "type": "string",
          "example": "803423561",
          "description": "Business number"
        },
        "name": {
          "type": "string",
          "example": "Mary Smith",
          "description": "Merchant name"
        },
        "address": {
          "type": "string",
          "example": "15 Fitzgerald Rd, Ottawa, ON K2H 9G1",
          "description": "Merchant address"
        },
        "address_line_1": {
          "type": "string",
          "example": "15 Fitzgerald Rd",
          "description": "The first line of the registered address for the merchant"
        },
        "address_line_2": {
          "type": "string",
          "example": "Unit 302",
          "description": "The second line of the registered address for the merchant"
        },
        "city": {
          "type": "string",
          "example": "Ottawa",
          "description": "The city of the registered address for the merchant"
        },
        "postal_code": {
          "type": "string",
          "example": "K2H 9G1",
          "description": "The postal code of the registered address for the merchant"
        },
        "state_province": {
          "type": "string",
          "example": "ON",
          "description": "The postal code of the registered address for the merchant"
        },
        "country": {
          "type": "string",
          "example": "CAN",
          "description": "The postal code of the registered address for the merchant"
        },
        "incorporated_in": {
          "type": "string",
          "example": "Ontario",
          "description": "Jurisdiction of incorporation"
        },
        "operate_in": {
          "type": "string",
          "example": "Ontario",
          "description": "Jurisdiction where the business operates in"
        },
        "doing_business_as": {
          "type": "string",
          "example": "ACME Co.",
          "description": "The alternative/franchise name that the merchant is doing business as"
        },
        "campaigns": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Campaign"
          }
        },
        "kyc_verified": {
          "$ref": "#/definitions/KycVerifiedEntity",
          "description": "The kyc verified status of the merchant"
        },
        "selected_bank_account": {
          "type": "string",
          "example": "ba_HLD8shTz9mAMKYvE",
          "description": "Identifier of which account the merchant selected"
        },
        "selected_mm_account_details": {
          "$ref": "#/definitions/BankAccountDetailsEntity",
          "description": "Details of the selected MM account"
        },
        "selected_sales_volume_account_details": {
          "$ref": "#/definitions/BankAccountDetailsEntity",
          "description": "Details of the selected sales volume account"
        },
        "selected_sales_volume_accounts": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": "['ba_123']",
          "description": "Array of identifiers of accounts that are considered for sales volume calculations"
        },
        "selected_insights_bank_accounts": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": "['ba_123']",
          "description": "Array of identifiers of bank accounts that are considered for insights"
        },
        "selected_insights_bank_accounts_details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BankAccountDetailsEntity"
          },
          "description": "Details of the selected insights bank accounts"
        },
        "flinks_refresh_in_progress_id": {
          "type": "string",
          "example": "flr_HLD8shTz9mAMKYvE",
          "description": "Identifier of which Flinks connection is currently ongoing"
        },
        "cfa_last_refreshed_at": {
          "type": "string",
          "format": "date-time",
          "example": "2019-10-01 18:55:09 UTC",
          "description": "Date CFA data was last refreshed at"
        },
        "bank_connection_required": {
          "type": "boolean",
          "example": true,
          "description": "Determine if the merchant should be ask to connect to his bank"
        },
        "quickbooks_imported_at": {
          "type": "string",
          "format": "date-time",
          "example": "2019-10-01 18:55:09 UTC",
          "description": "The date data from Quickbooks was last imported at"
        },
        "quickbooks_realm_id": {
          "type": "string",
          "example": "1234567890",
          "description": "The realmId (customer identifier) for this business in Quickbooks"
        },
        "quickbooks_state": {
          "type": "string",
          "example": "connected",
          "description": "The state of the merchant's connection to Quickbooks"
        },
        "desired_bank_account_balance": {
          "type": "number",
          "format": "float",
          "example": 389.9,
          "description": "The merchant's desired bank account balance"
        },
        "total_remaining_payment_amount": {
          "type": "number",
          "format": "float",
          "example": 4500.34,
          "description": "Outstanding Balance across all financing products"
        },
        "delinquent": {
          "type": "boolean",
          "example": false,
          "description": "Is the merchant delinquent"
        },
        "marketing_qualified_lead": {
          "type": "boolean",
          "example": true,
          "description": "Status of qualified lead"
        },
        "ecomm_enabled": {
          "type": "boolean",
          "example": true,
          "description": "Whether the merchant is ecomm enabled"
        },
        "valid_cfa_accounts": {
          "type": "boolean",
          "example": true,
          "description": "Determine if the merchant has valid CFA accounts"
        },
        "on_payment_plan": {
          "type": "boolean",
          "example": true,
          "description": "Whether the merchant has loans with a payment plan"
        },
        "loc_offer_id": {
          "type": "string",
          "example": "lvo_kStaGcscUy7gRpe6",
          "description": "LOC offer id"
        },
        "access_funds_blocked": {
          "type": "boolean",
          "example": true,
          "description": "Whether the merchant should be blocked from accessing funds"
        },
        "in_bad_standing": {
          "type": "boolean",
          "example": true,
          "description": "Whether the merchant is in bad standing"
        },
        "can_use_initial_amortization": {
          "type": "boolean",
          "example": true,
          "description": "Whether the merchant can receive initial schedule from app"
        }
      },
      "description": "Merchant model"
    },
    "KycVerifiedEntity": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "description": "The current KYC verified state of the merchant"
        },
        "date_last_verified": {
          "type": "string",
          "format": "date-time",
          "description": "The oldest date of any of the KYC checks"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/KycVerifiedDetailsCheckEntity"
          }
        }
      }
    },
    "KycVerifiedDetailsCheckEntity": {
      "type": "object",
      "properties": {
        "check": {
          "type": "string",
          "description": "The KYC check"
        },
        "status": {
          "type": "string",
          "description": "The current state of the KYC check"
        },
        "date_last_verified": {
          "type": "string",
          "format": "date-time",
          "description": "The date the KYC check was performed"
        },
        "guid": {
          "type": "string",
          "description": "The identifier for the applicant or merchant associated with the check"
        },
        "reason_code": {
          "type": "integer",
          "format": "int32",
          "description": "The reason code for the failure"
        }
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "u_CEa7S2MgiQAUBzZY",
          "description": "User ID"
        },
        "email": {
          "type": "string",
          "example": "user@example.com",
          "description": "User email"
        },
        "name": {
          "type": "string",
          "example": "John Smith",
          "description": "User name"
        },
        "enabled": {
          "type": "boolean",
          "example": true,
          "description": "User's status"
        },
        "confirmed": {
          "type": "boolean",
          "example": true,
          "description": "User's confirmation status"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "example": "2020-01-01T14:49:09.920Z",
          "description": "The date that the user was created at"
        },
        "last_modified_at": {
          "type": "string",
          "format": "date-time",
          "example": "2020-01-01T14:49:09.920Z",
          "description": "The date that the user was last modified at"
        }
      }
    },
    "ErrorEntity": {
      "type": "object",
      "properties": {
        "status": {
          "type": "integer",
          "format": "int32",
          "example": "404",
          "description": "Error response status"
        },
        "message": {
          "type": "string",
          "example": "Not Found",
          "description": "Error message"
        },
        "code": {
          "type": "integer",
          "format": "int32",
          "example": "10001",
          "description": "Error code to identify the issue"
        }
      },
      "description": "ErrorEntity model"
    },
    "LeadsListingEntity": {
      "type": "object",
      "properties": {
        "offset": {
          "type": "integer",
          "format": "int32",
          "example": 10,
          "description": "The offset into the list entities"
        },
        "limit": {
          "type": "integer",
          "format": "int32",
          "example": 10,
          "description": "The maximum number of entities that could be shown"
        },
        "total_count": {
          "type": "integer",
          "format": "int32",
          "example": 10,
          "description": "The number of entities available"
        },
        "filtered_count": {
          "type": "integer",
          "format": "int32",
          "example": 10,
          "description": "The number of filtered entities available"
        },
        "order_by": {
          "type": "string",
          "example": "created_at",
          "description": "The field the data returned is ordered by"
        },
        "order_direction": {
          "type": "string",
          "example": "desc",
          "description": "The direction the data returned is ordered by"
        },
        "filter": {
          "type": "string",
          "example": "created",
          "description": "The search string used to filter results by"
        },
        "leads": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Lead"
          },
          "description": "List of leads"
        }
      },
      "description": "LeadsListingEntity model"
    },
    "Lead": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "lead_b8srDM1Fq2mjb92S",
          "description": "Lead Guid"
        },
        "external_id": {
          "type": "string",
          "example": "b85e6158-65ca-4eff-b125-82be73cce793",
          "description": "Lead external ID"
        },
        "applicant_email": {
          "type": "string",
          "example": "lucas@example.com",
          "description": "Applicant email address"
        },
        "applicant_first_name": {
          "type": "string",
          "example": "Lucas",
          "description": "Applicant first name"
        },
        "applicant_last_name": {
          "type": "string",
          "example": "Lead",
          "description": "Applicant last name"
        },
        "merchant_name": {
          "type": "string",
          "example": "Ario",
          "description": "Business name"
        },
        "selected_insights_bank_accounts": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": "['ba_123']",
          "description": "Array of identifiers of bank accounts that are considered for insights"
        },
        "desired_bank_account_balance": {
          "type": "number",
          "format": "float",
          "example": 389.9,
          "description": "The lead's desired bank account balance"
        },
        "language": {
          "type": "string",
          "example": "EN",
          "description": "Preferred language"
        },
        "casl_consent": {
          "type": "boolean",
          "example": "true",
          "description": "CASL flag"
        },
        "casl_updated": {
          "type": "string",
          "format": "date-time",
          "example": "2020-09-14T14:59:52Z",
          "description": "CASL last updated time"
        },
        "source": {
          "type": "string",
          "example": "unbounce",
          "description": "Leads source"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "example": "2020-09-14T14:59:52Z",
          "description": "Lead creation timestamp"
        },
        "quickbooks_state": {
          "type": "string",
          "example": "connected",
          "description": "The state of the lead's connection to Quickbooks"
        },
        "attributes": {
          "type": "string",
          "example": "{ \"merchant_address\": \"35 Fitzgerald Rd, Ottawa, ON\", \"merchant_phone_number\": \"6136136136\" }",
          "description": "Lead attributes"
        },
        "user_guid": {
          "type": "string",
          "example": "u_JSsaG8Q1eBTcCWD5",
          "description": "User Guid"
        },
        "tracked_object_id": {
          "type": "string",
          "example": "obj_AZc4XwHiBNGZi1a9",
          "description": "Tracked Object Guid"
        },
        "selected_insights_bank_accounts_details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BankAccountDetailsEntity"
          },
          "description": "Details of the selected insights bank accounts"
        },
        "cfa_last_refreshed_at": {
          "type": "string",
          "format": "date-time",
          "example": "2019-10-01 18:55:09 UTC",
          "description": "Date CFA data was last refreshed at"
        },
        "bank_connection_required": {
          "type": "boolean",
          "example": true,
          "description": "Determine if the lead should be asked to connect to his bank"
        },
        "valid_cfa_accounts": {
          "type": "boolean",
          "example": true,
          "description": "Determine if the lead has valid CFA accounts"
        },
        "invite_link": {
          "type": "string",
          "description": "Invite link"
        }
      },
      "description": "Lead model"
    },
    "Partner": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The partner's ID"
        },
        "name": {
          "type": "string",
          "description": "The partner's name"
        },
        "idp_id": {
          "type": "string",
          "description": "The partner's identity provider ID"
        }
      }
    },
    "PartnerThemeEntity": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Partner theme ID"
        },
        "vanity": {
          "type": "string",
          "description": "Requested partner vanity"
        },
        "primary_colour": {
          "type": "string",
          "description": "Primary colour (hexadecimal) of the partner theme"
        },
        "secondary_colour": {
          "type": "string",
          "description": "Secondary colour (hexadecimal) of the partner theme"
        },
        "logo": {
          "type": "string",
          "description": "Logo of the partner theme"
        }
      }
    },
    "SocialConnectionsEntity": {
      "type": "object",
      "properties": {
        "facebook": {
          "$ref": "#/definitions/Social_FacebookSocialConnectionEntity",
          "description": "The Facebook connection info"
        }
      },
      "description": "SocialConnectionsEntity model"
    },
    "Social_FacebookSocialConnectionEntity": {
      "type": "object",
      "properties": {
        "state": {
          "type": "string",
          "example": "connected",
          "description": "The state of the Facebook connection"
        },
        "pages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Social_FacebookPageEntity"
          }
        }
      }
    },
    "Social_FacebookPageEntity": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The Facebook id for the page"
        },
        "name": {
          "type": "string",
          "description": "The name of the Facebook page"
        },
        "category": {
          "type": "string",
          "description": "The category of the Facebook page"
        }
      }
    },
    "LendingUbl": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "lub_YyAzVj1pTWaHGWno",
          "description": "Ubl ID"
        },
        "state": {
          "type": "string",
          "enum": [
            "pending",
            "funding_approved",
            "in_progress",
            "repaying",
            "last_repayment",
            "complete",
            "closed",
            "suspended",
            "cancelled"
          ],
          "example": "remitting",
          "description": "Current state of the loan"
        },
        "application_id": {
          "type": "string",
          "example": "lap_pM7kHNFGMqJgC6Yo",
          "description": "Application ID"
        },
        "offer_id": {
          "type": "string",
          "example": "lvo_oqQeKUL6Ry5cm1XM",
          "description": "Offer ID"
        },
        "merchant_id": {
          "type": "string",
          "example": "m_Ysfr4nLPhMDkw9uK",
          "description": "Merchant ID"
        },
        "merchant_account_id": {
          "type": "string",
          "example": "a_s2H9MpWzRQnFwsVK",
          "description": "Account ID for the merchant"
        },
        "terms": {
          "type": "string",
          "description": "Terms and conditions"
        },
        "currency": {
          "type": "string",
          "enum": [
            "CAD",
            "USD"
          ],
          "default": "CAD",
          "example": "CAD",
          "description": "Currency ISO code of the loan"
        },
        "principal_amount": {
          "type": "number",
          "format": "double",
          "example": "10000.00",
          "description": "Value of the initial principal"
        },
        "interest_amount": {
          "type": "number",
          "format": "double",
          "example": "10000.00",
          "description": "Total value of the interest"
        },
        "apr": {
          "type": "number",
          "format": "double",
          "example": "0.15",
          "description": "Annual Percentage Rate, is the interest rate for a whole year"
        },
        "loan_term": {
          "type": "number",
          "format": "double",
          "example": "60",
          "description": "Number of days/weeks/months or years representing the time available to repay the loan"
        },
        "repayment_schedule": {
          "type": "string",
          "example": "daily",
          "description": "Frequency of the repayments"
        },
        "next_repayment_amount": {
          "type": "number",
          "format": "double",
          "example": "8.53",
          "description": "Next repayment amount for this loan"
        },
        "next_repayment_at": {
          "type": "string",
          "format": "date-time",
          "example": "2024-11-08T13:47:22Z",
          "description": "DateTime when the next loan repayment is expected"
        },
        "activated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Datetime when the loan became active"
        },
        "loan_sent_at": {
          "type": "string",
          "format": "date-time",
          "description": "Datetime when the loan funds were sent"
        },
        "loan_deposited_at": {
          "type": "string",
          "format": "date-time",
          "description": "Datetime when the loan was deposited in the merchant bank account`"
        },
        "fully_repaid_at": {
          "type": "string",
          "format": "date-time",
          "description": "Datetime when the loan was paid off"
        },
        "first_repayment_at": {
          "type": "string",
          "format": "date-time",
          "description": "Datetime after which the first repayment is expected"
        },
        "loan_status": {
          "type": "string",
          "example": "payment_plan",
          "description": "Status showing if the loan is on a payment plan"
        },
        "initial_term_duration": {
          "type": "integer",
          "format": "int32",
          "example": "12",
          "description": "Duration of the loan (from product term)"
        },
        "initial_term_unit": {
          "type": "string",
          "example": "Months",
          "description": "Unit of loan duration (from product term)"
        },
        "initial_paidoff_date": {
          "type": "string",
          "format": "date-time",
          "example": "2024-11-08T13:47:22Z",
          "description": "DateTime when the next loan repayment is expected"
        },
        "total_repayments_amount": {
          "type": "number",
          "format": "double",
          "example": "2316.33",
          "description": "BigDecimal of total ubl paid off so far"
        },
        "total_interests_amount": {
          "type": "number",
          "format": "double",
          "example": "138.61",
          "description": "BigDecimal of total ubl interest paid off so far"
        },
        "outstanding_balance": {
          "type": "number",
          "format": "double",
          "example": "5517.83",
          "description": "BigDecimal of total still owing. Principle and interest"
        },
        "remaining_principal": {
          "type": "number",
          "format": "double",
          "example": "4899.31",
          "description": "BigDecimal of total princinpal still owing"
        },
        "application_created_at": {
          "type": "string",
          "format": "date-time",
          "example": "2024-11-08T13:47:22Z",
          "description": "DateTime when application initially created"
        },
        "amortization_schedule_available": {
          "type": "boolean",
          "example": false,
          "description": "Flag to indicate if the amortization schedule is available for download"
        },
        "upcoming_payments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UpcomingPayment"
          },
          "description": "List of upcoming payments"
        },
        "ratio_repaid": {
          "type": "number",
          "format": "double",
          "description": "Percentage of (dollars) loan paid off"
        }
      },
      "description": "LendingUbl model"
    },
    "UpcomingPayment": {
      "type": "object",
      "properties": {
        "date": {
          "type": "string",
          "format": "date-time",
          "description": "Date for payment"
        },
        "total_amount": {
          "type": "number",
          "format": "double",
          "example": 5631.45,
          "description": "Total amount to pay for this payment"
        }
      }
    },
    "LendingOfflinePayout": {
      "type": "object",
      "properties": {
        "payee": {
          "type": "string",
          "example": "key supplier",
          "description": "identifying payee of the offline payout"
        },
        "amount": {
          "type": "number",
          "format": "double",
          "example": 200.12,
          "description": "the amount of the payout"
        },
        "label": {
          "type": "string",
          "example": "Rexel",
          "description": "additional info about the payee (competitor or key supplier) or CRA number"
        }
      }
    },
    "LendingApplicationFee": {
      "type": "object",
      "properties": {
        "application_id": {
          "type": "string",
          "example": "",
          "description": "the application id which is associated to this fee"
        },
        "fee": {
          "type": "number",
          "format": "double",
          "example": "120.00",
          "description": "the fee corresponding to this application"
        },
        "principal_amount": {
          "type": "number",
          "format": "double",
          "example": "10000.00",
          "description": "Value of the initial loan"
        },
        "currency": {
          "type": "string",
          "enum": [
            "CAD",
            "USD"
          ],
          "default": "CAD",
          "example": "CAD",
          "description": "Currency ISO code of the fee"
        },
        "loan_term": {
          "type": "integer",
          "format": "int32",
          "example": "60",
          "description": "Loan term - in days"
        },
        "repayment_amount": {
          "type": "number",
          "format": "double",
          "example": "8.42",
          "description": "the repayment amount (corresponds to term)"
        }
      },
      "description": "LendingApplicationFee model"
    },
    "LendingOfferFee": {
      "type": "object",
      "properties": {
        "offer_id": {
          "type": "string",
          "example": "",
          "description": "the offer id which is associated to this fee"
        },
        "fee": {
          "type": "number",
          "format": "double",
          "example": "120.00",
          "description": "the fee corresponding to this offer"
        },
        "principal_amount": {
          "type": "number",
          "format": "double",
          "example": "10000.00",
          "description": "Value of the initial loan"
        },
        "currency": {
          "type": "string",
          "enum": [
            "CAD",
            "USD"
          ],
          "default": "CAD",
          "example": "CAD",
          "description": "Currency ISO code of the fee"
        },
        "loan_term": {
          "type": "integer",
          "format": "int32",
          "example": "60",
          "description": "Loan term - in days"
        },
        "repayment_amount": {
          "type": "number",
          "format": "double",
          "example": "8.42",
          "description": "the repayment amount (corresponds to term)"
        },
        "apr": {
          "type": "number",
          "format": "double",
          "example": "0.44",
          "description": "Loan apr"
        }
      },
      "description": "LendingOfferFee model"
    },
    "LendingRepayment": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "lrp_tRJSdViPg9izSKbK",
          "description": "id"
        },
        "state": {
          "type": "string",
          "example": "transferred",
          "description": "Current state of the repayment"
        },
        "ubl_id": {
          "type": "string",
          "example": "lub_eWkKLrpKU9nkynqZ",
          "description": "Lending Ubl id"
        },
        "merchant_account_id": {
          "type": "string",
          "example": "a_DWc1jXjyDUcu6RP1",
          "description": "Account ID for the merchant"
        },
        "currency": {
          "type": "string",
          "enum": [
            "CAD",
            "USD"
          ],
          "default": "CAD",
          "example": "CAD",
          "description": "Currency ISO code of the repayment"
        },
        "repayment_amount": {
          "type": "number",
          "format": "double",
          "example": "123.45",
          "description": "Amount of repayment"
        },
        "repayment_requested_for": {
          "type": "string",
          "format": "date",
          "example": "2016-12-25",
          "description": "Date of the repayment"
        },
        "repayment_schedule": {
          "type": "string",
          "example": "daily",
          "description": "Frequency of the repayments"
        }
      },
      "description": "LendingRepayment model"
    },
    "LendingRequiredDocument": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "example": "tax_assessment",
          "description": "identifying string of the document type required"
        },
        "state": {
          "type": "string",
          "example": "required",
          "description": "if it has been collected or still required"
        }
      }
    },
    "Lending_ApplicationSummaryEntity": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "lap_njsUk7wzQqcA2oWB",
          "description": "application ID"
        },
        "state": {
          "type": "string",
          "enum": [
            "pending",
            "waiting_for_documents",
            "reviewing",
            "approving",
            "approved",
            "declining",
            "declined",
            "cancelling",
            "cancelled",
            "expiring",
            "expired",
            "accepted",
            "kyc_verifying",
            "kyc_failing",
            "kyc_failed",
            "hard_hitting",
            "hard_hit_failing",
            "hard_hit_failed",
            "laasing",
            "completing",
            "completed"
          ],
          "example": "approved",
          "description": "Current state of the application"
        },
        "principal_amount": {
          "type": "number",
          "format": "double",
          "example": "10000.00",
          "description": "Value of the loan applied for"
        },
        "max_principal_amount": {
          "type": "number",
          "format": "double",
          "example": "20000.00",
          "description": "Max value of the loan"
        },
        "requested_amount": {
          "type": "number",
          "format": "double",
          "example": "10000.00",
          "description": "Value of the initial loan application"
        },
        "applied_at": {
          "type": "string",
          "format": "date-time",
          "default": "",
          "example": "Thu, 16 Feb 2018 02:38:08 +0000",
          "description": "Date and Time the merchant applied for the application"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "default": "",
          "example": "Thu, 16 Feb 2018 02:38:08 +0000",
          "description": "Date and Time the merchant application was last updated"
        }
      }
    },
    "LendingLoanTerm": {
      "type": "object",
      "properties": {
        "term_duration": {
          "type": "number",
          "format": "double",
          "example": "90",
          "description": "Duration of the loan term in units"
        },
        "term_unit": {
          "type": "string",
          "example": "days",
          "description": "Units for the duration"
        },
        "term_frequency": {
          "type": "string",
          "example": "daily",
          "description": "The payment frequency for the term"
        },
        "fee_factor": {
          "type": "number",
          "format": "double",
          "example": "0.095",
          "description": "Factor rate associated with the term"
        },
        "id": {
          "type": "string",
          "example": "pt_123",
          "description": "Identifier of this term"
        }
      }
    },
    "LendingVariableOffer": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "lvo_5jizg7g3G7PDwFyD",
          "description": "id"
        },
        "state": {
          "type": "string",
          "example": "approved",
          "description": "state"
        },
        "merchant_id": {
          "type": "string",
          "example": "m_J4MNoRX6WKM9BtPd",
          "description": "Merchant ID"
        },
        "currency": {
          "type": "string",
          "enum": [
            "CAD",
            "USD"
          ],
          "default": "CAD",
          "example": "CAD",
          "description": "Currency ISO code of the variable offer"
        },
        "default_principal_amount": {
          "type": "number",
          "format": "double",
          "example": "8000.00",
          "description": "Default value of the variable offer"
        },
        "default_loan_term": {
          "type": "string",
          "example": "90",
          "description": "Default loan term"
        },
        "default_repayment_schedule": {
          "type": "string",
          "example": "daily",
          "description": "Default frequency of the repayments"
        },
        "min_principal_amount": {
          "type": "number",
          "format": "double",
          "example": "5000.00",
          "description": "Minimum value available to borrow"
        },
        "max_principal_amount": {
          "type": "number",
          "format": "double",
          "example": "15000.00",
          "description": "Maximum value available"
        },
        "used_amount": {
          "type": "number",
          "format": "double",
          "example": "1000.00",
          "description": "Amount currently used/borrowed"
        },
        "available_amount": {
          "type": "number",
          "format": "double",
          "example": "1000.00",
          "description": "Amount available for new applications"
        },
        "outstanding_balance": {
          "type": "number",
          "format": "double",
          "example": "5400.50",
          "description": "Amount outstanding for this client"
        },
        "in_progress_amount": {
          "type": "number",
          "format": "double",
          "example": "1200.00",
          "description": "Amount that is in any in progress applications"
        },
        "small_business_grade": {
          "type": "string",
          "example": "C",
          "description": "Small business grade of the business"
        },
        "preapproval_supported": {
          "type": "boolean",
          "example": "true",
          "description": "Flag to indicate if the offer carries a pre-approved amount"
        },
        "available_terms": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LendingLoanTerm"
          },
          "description": "Available loan terms for this product"
        },
        "application_prerequisites": {
          "type": "object",
          "properties": {
            "payee": {
              "type": "string",
              "example": "self"
            },
            "offer_type": {
              "type": "string",
              "example": "wca"
            }
          }
        },
        "applications_in_progress": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Lending_ApplicationSummaryEntity"
          },
          "description": "A summary of in progress applications"
        },
        "expires_at": {
          "type": "string",
          "format": "date-time",
          "example": "2019-05-31T14:49:09.920Z",
          "description": "Date at which the offers expires"
        },
        "expired_at": {
          "type": "string",
          "format": "date-time",
          "example": "2019-05-31T14:49:09.920Z",
          "description": "Date at which the offers expired"
        },
        "conditional": {
          "type": "boolean",
          "example": "true",
          "description": "Flag to indicate if the offer is conditional"
        }
      },
      "description": "LendingVariableOffer model"
    },
    "LendingApplication": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "lap_Ccbxyjd7mVnJEktX",
          "description": "ID"
        },
        "state": {
          "type": "string",
          "enum": [
            "pending",
            "waiting_for_documents",
            "reviewing",
            "approving",
            "approved",
            "declining",
            "declined",
            "cancelling",
            "cancelled",
            "expiring",
            "expired",
            "accepted",
            "kyc_verifying",
            "kyc_failing",
            "kyc_failed",
            "hard_hitting",
            "hard_hit_failing",
            "hard_hit_failed",
            "laasing",
            "completing",
            "completed"
          ],
          "example": "approved",
          "description": "Current state of the application"
        },
        "requires_guarantor": {
          "type": "boolean",
          "example": "true",
          "description": "If a guarantor is required to be added to the application"
        },
        "merchant_id": {
          "type": "string",
          "example": "m_kHqxv1S9Xn79jdNL",
          "description": "Merchant ID"
        },
        "offer_id": {
          "type": "string",
          "example": "lvo_bQzFs2iUXNmQwHeD",
          "description": "ID of offer to which the application is applying"
        },
        "loan_id": {
          "type": "string",
          "example": "lub_17ZJS56xcP4AbBvg",
          "description": "UBL ID"
        },
        "terms": {
          "type": "string",
          "description": "Terms and conditions"
        },
        "principal_amount": {
          "type": "number",
          "format": "double",
          "example": "10000.00",
          "description": "Value of the depositing loan"
        },
        "max_principal_amount": {
          "type": "number",
          "format": "double",
          "example": "20000.00",
          "description": "Value of the approved loan"
        },
        "requested_amount": {
          "type": "number",
          "format": "double",
          "example": "10000.00",
          "description": "Value of the initial loan"
        },
        "fee": {
          "type": "number",
          "format": "double",
          "example": "300.00",
          "description": "Fee for the application/loan"
        },
        "fee_factor": {
          "type": "number",
          "format": "double",
          "example": "0.095",
          "description": "Fee  factor for the application/loan"
        },
        "apr": {
          "type": "number",
          "format": "double",
          "example": "0.27",
          "description": "APR for the application/loan"
        },
        "currency": {
          "type": "string",
          "enum": [
            "CAD",
            "USD"
          ],
          "default": "CAD",
          "example": "CAD",
          "description": "Currency ISO code of the application"
        },
        "repayment_schedule": {
          "type": "string",
          "example": "weekly",
          "description": "Repayment schedule for the loan"
        },
        "loan_term": {
          "type": "integer",
          "format": "int32",
          "example": "120 days",
          "description": "Term of the loan"
        },
        "term_duration": {
          "type": "integer",
          "format": "int32",
          "example": "12",
          "description": "Duration of the loan (from product term)"
        },
        "term_unit": {
          "type": "string",
          "example": "Months",
          "description": "Unit of loan duration (from product term)"
        },
        "merchant_user_email": {
          "type": "string",
          "example": "vic@johnsplumbing.com",
          "description": "Email of the authenticated user (representing the merchant) that applied for an offer"
        },
        "merchant_user_id": {
          "type": "string",
          "example": "5426a4ed-86dd-43e7-8d00-25078c51b8a5",
          "description": "Unique user ID of the authenticated user (representing the merchant) that applied for an offer"
        },
        "expires_at": {
          "type": "string",
          "format": "date-time",
          "example": "Thu, 22 Feb 2018 15:38:08 +0000",
          "description": "Date and Time at which this application becomes invalid"
        },
        "cancellation_reason": {
          "type": "string",
          "default": "",
          "example": "",
          "description": "Cancellation reason, if merchant rejects an application."
        },
        "ztt_approved_at": {
          "type": "string",
          "format": "date-time",
          "example": "Thu, 22 Feb 2018 18:38:08 +0000",
          "description": "Date and Time at which ZetaTango approved the application."
        },
        "ztt_declined_at": {
          "type": "string",
          "format": "date-time",
          "example": "Thu, 22 Feb 2018 18:38:08 +0000",
          "description": "Date and Time at which ZetaTango declined the application."
        },
        "laas_approved_at": {
          "type": "string",
          "format": "date-time",
          "example": "Thu, 23 Feb 2018 09:38:08 +0000",
          "description": "Date and Time at which the LaaS approved the application."
        },
        "ubl_terms_agreed_at": {
          "type": "string",
          "format": "date-time",
          "default": "",
          "example": "Thu, 16 Feb 2018 15:38:08 +0000",
          "description": "Date and Time at which the merchant agreed to and signed the terms of the Loan agreement."
        },
        "pad_terms_agreed_at": {
          "type": "string",
          "format": "date-time",
          "default": "",
          "example": "Thu, 16 Feb 2018 15:38:08 +0000",
          "description": "Date and Time at which the merchant agreed to and signed the PAD Agreement of the loan agreement."
        },
        "client_ip_address": {
          "type": "string",
          "default": "",
          "example": "129.158.232.128",
          "description": "Client IP Address of the merchant who agreed to and signed the PAD Agreement of the loan agreement."
        },
        "payee_account_id": {
          "type": "string",
          "default": "",
          "example": "5426a4ed-86dd-43e7-8d00-25078c51b8a5",
          "description": "Identifier of which account the payee selected for this loan"
        },
        "payor_account_id": {
          "type": "string",
          "default": "",
          "example": "kj32a4ed-86dd-43e7-8d00-25078c513jb3",
          "description": "Identifier of which account the payor selected for this loan"
        },
        "payee_id": {
          "type": "string",
          "default": "",
          "example": "su_1fadsfsdaafadsfhadfasdfaf",
          "description": "Identifier of the payee for this application"
        },
        "payee_name": {
          "type": "string",
          "example": "AFTON FOOD GROUP",
          "description": "Name of the payee for this application"
        },
        "payee_account_num": {
          "type": "string",
          "default": "",
          "example": "A0-12411-0",
          "description": "Account number (if applicable) this application is for"
        },
        "payee_invoice_num": {
          "type": "string",
          "default": "",
          "example": "1231231-0",
          "description": "Invoice number (if applicable) this application is for"
        },
        "applied_at": {
          "type": "string",
          "format": "date-time",
          "default": "",
          "example": "Thu, 16 Feb 2018 02:38:08 +0000",
          "description": "Date and Time the merchant applied to the offer"
        },
        "terms_signature_required": {
          "type": "boolean",
          "example": true,
          "description": "Determine if the merchant should be ask to sign the terms agreement"
        },
        "required_documents": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LendingRequiredDocument"
          },
          "description": "Documents which need to be collected for this application"
        },
        "repayment_amount": {
          "type": "number",
          "format": "double",
          "example": "8.42",
          "description": "the repayment amount (corresponds to term)"
        },
        "contract_repayment_amount": {
          "type": "number",
          "format": "double",
          "example": "10.18",
          "description": "the contract_repayment amount (excluding weekends and holidays)"
        },
        "available_terms": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LendingLoanTerm"
          },
          "description": "Available loan terms for this product"
        },
        "offline_payouts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LendingOfflinePayout"
          },
          "description": "Payouts that need to be sent (offline) for this application"
        },
        "agreement_version_outdated": {
          "type": "boolean",
          "example": "true",
          "description": "If the agreement version is outdated"
        }
      },
      "description": "LendingApplication model"
    },
    "Upload": {
      "type": "object",
      "properties": {
        "file_key": {
          "type": "string",
          "example": "d9fc9646-31d4-4250-acf6-480912eab1f9",
          "description": "File UUID identifier"
        },
        "upload_url": {
          "type": "string",
          "example": "https://bucket.s3.region.amazonaws.com/00000000-0000-0000-0000-000000000000?more_query_parmeters",
          "description": "Pre-signed upload URL"
        }
      },
      "description": "Upload model"
    },
    "CommonBankAccountSummary": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "ba_HLD8shTz9mAMKYvE",
          "description": "Bank Account ID"
        },
        "name": {
          "type": "string",
          "example": "Main bank account",
          "description": "Bank account name"
        },
        "account_type": {
          "type": "string",
          "example": "Savings",
          "description": "Account type"
        },
        "institution_number": {
          "type": "string",
          "example": "000",
          "description": "Institution number"
        },
        "transit_number": {
          "type": "string",
          "example": "00000",
          "description": "Transit (or branch) number"
        },
        "account_number": {
          "type": "string",
          "example": "0000000",
          "description": "Account number"
        },
        "verified": {
          "type": "string",
          "example": "true",
          "description": "Verified"
        }
      }
    },
    "Terms": {
      "type": "object",
      "properties": {
        "content": {
          "type": "string",
          "example": "These are the terms and conditions for Your loan.\nThis document represents a binding contract between Merchant and ZetaTango Test Partner.\nMerchant agrees to receive a loan amount of CAD $10000,\nwith a total cost of borrowing of CAD $10340 for a term of 90 days.\nRepayment will occur daily (on bank processing days only).",
          "description": "Terms and Conditions"
        }
      },
      "description": "Terms model"
    },
    "CommonBankAccount": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "ba_HLD8shTz9mAMKYvE",
          "description": "Bank Account ID"
        },
        "owner_guid": {
          "type": "string",
          "example": "m_hp7ijmcAjcEiBs4H",
          "description": "Merchant ID"
        },
        "name": {
          "type": "string",
          "example": "Main bank account",
          "description": "Bank account name"
        },
        "account_type": {
          "type": "string",
          "example": "Savings",
          "description": "Account type"
        },
        "currency": {
          "type": "string",
          "enum": [
            "CAD",
            "USD"
          ],
          "default": "CAD",
          "example": "CAD",
          "description": "Currency ISO code of the advance"
        },
        "institution_number": {
          "type": "string",
          "example": "000",
          "description": "Institution number"
        },
        "transit_number": {
          "type": "string",
          "example": "00000",
          "description": "Transit (or branch) number"
        },
        "account_number": {
          "type": "string",
          "example": "0000000",
          "description": "Account number"
        },
        "source": {
          "type": "string",
          "example": "flinks",
          "description": "Source"
        },
        "verified": {
          "type": "string",
          "example": "true",
          "description": "Verified"
        },
        "bank_connection_required": {
          "type": "boolean",
          "example": "true",
          "description": "Bank connection required"
        },
        "connected_to_cfa": {
          "type": "boolean",
          "example": "true",
          "description": "Connected to CFA"
        },
        "connected_to_loc": {
          "type": "boolean",
          "example": "true",
          "description": "Connected to LOC"
        },
        "account_details": {
          "$ref": "#/definitions/BankAccountDetailsEntity",
          "description": "Details of the bank account"
        },
        "plaid_item_id": {
          "type": "string",
          "example": "pli_123",
          "description": "Plaid Item identifier"
        },
        "flinks_login_id": {
          "type": "string",
          "example": "fl_123",
          "description": "Flinks Login identifier"
        },
        "connection_status": {
          "type": "string",
          "example": "Connected",
          "description": "Connection status of the bank account"
        },
        "preferred_source": {
          "type": "string",
          "example": "flinks",
          "description": "Source that should be used for reconnect"
        }
      },
      "description": "CommonBankAccount model"
    },
    "TrackedObjectEventListingEntity": {
      "type": "object",
      "properties": {
        "offset": {
          "type": "integer",
          "format": "int32",
          "example": 10,
          "description": "The offset into the list entities"
        },
        "limit": {
          "type": "integer",
          "format": "int32",
          "example": 10,
          "description": "The maximum number of entities that could be shown"
        },
        "total_count": {
          "type": "integer",
          "format": "int32",
          "example": 10,
          "description": "The number of entities available"
        },
        "filtered_count": {
          "type": "integer",
          "format": "int32",
          "example": 10,
          "description": "The number of filtered entities available"
        },
        "order_by": {
          "type": "string",
          "example": "created_at",
          "description": "The field the data returned is ordered by"
        },
        "order_direction": {
          "type": "string",
          "example": "desc",
          "description": "The direction the data returned is ordered by"
        },
        "filter": {
          "type": "string",
          "example": "created",
          "description": "The search string used to filter results by"
        },
        "tracked_object_events": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TrackedObjectEventEntity"
          },
          "description": "The tracked object events"
        }
      },
      "description": "TrackedObjectEventListingEntity model"
    },
    "MarketingCampaign": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "mktcam_Pv9DBgbK8wD2hqed",
          "description": "The marketing campaign id"
        },
        "state": {
          "type": "string",
          "example": "scheduled",
          "description": "State of the marketing campaign"
        },
        "merchant_id": {
          "type": "string",
          "example": "m_1xARXng6Svi41pNi",
          "description": "The merchant id"
        },
        "scheduled_at": {
          "type": "string",
          "format": "date-time",
          "example": "2019-05-31T14:49:09.920Z",
          "description": "The date when the marketing campaign was scheduled"
        },
        "started_at": {
          "type": "string",
          "format": "date-time",
          "example": "2019-05-31T14:49:09.920Z",
          "description": "The date when the marketing campaign was started"
        },
        "cancelled_at": {
          "type": "string",
          "format": "date-time",
          "example": "2019-05-31T14:49:09.920Z",
          "description": "The date when the marketing campaign was cancelled"
        },
        "completed_at": {
          "type": "string",
          "format": "date-time",
          "example": "2019-05-31T14:49:09.920Z",
          "description": "The date when the marketing campaign was completed"
        }
      },
      "description": "MarketingCampaign model"
    },
    "Marketing_CampaignListingEntity": {
      "type": "object",
      "properties": {
        "offset": {
          "type": "integer",
          "format": "int32",
          "example": 10,
          "description": "The offset into the list entities"
        },
        "limit": {
          "type": "integer",
          "format": "int32",
          "example": 10,
          "description": "The maximum number of entities that could be shown"
        },
        "total_count": {
          "type": "integer",
          "format": "int32",
          "example": 10,
          "description": "The number of entities available"
        },
        "filtered_count": {
          "type": "integer",
          "format": "int32",
          "example": 10,
          "description": "The number of filtered entities available"
        },
        "order_by": {
          "type": "string",
          "example": "created_at",
          "description": "The field the data returned is ordered by"
        },
        "order_direction": {
          "type": "string",
          "example": "desc",
          "description": "The direction the data returned is ordered by"
        },
        "filter": {
          "type": "string",
          "example": "created",
          "description": "The search string used to filter results by"
        },
        "marketing_campaigns": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MarketingCampaign"
          },
          "description": "Marketing campaigns"
        }
      }
    },
    "TransactionEntity": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "mt_8H1drhLCbThxekhX",
          "description": "The transaction id"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "example": "2019-05-31T14:49:09.920Z",
          "description": "The date the transfer was created"
        },
        "bank_account_info": {
          "$ref": "#/definitions/CommonBankAccountSummary",
          "description": "Information for the bank account linked to this transaction"
        },
        "amount": {
          "type": "number",
          "format": "float",
          "example": 100,
          "description": "The transaction amount"
        },
        "currency": {
          "type": "string",
          "example": "CAD",
          "description": "The transaction currency"
        },
        "direction": {
          "type": "string",
          "example": "credit",
          "description": "The transaction direction: debit or credit"
        },
        "state": {
          "type": "string",
          "example": "pending",
          "description": "The transaction state"
        },
        "request_sent_at": {
          "type": "string",
          "format": "date-time",
          "example": "2019-10-18 17:34:46 UTC",
          "description": "The transaction request sent at timestamp"
        },
        "request_started_at": {
          "type": "string",
          "format": "date-time",
          "example": "2019-10-18 17:34:46 UTC",
          "description": "The transaction request started at timestamp"
        },
        "success_at": {
          "type": "string",
          "format": "date-time",
          "example": "2019-10-18 17:34:46 UTC",
          "description": "The transaction success at timestamp"
        },
        "error_at": {
          "type": "string",
          "format": "date-time",
          "example": "2019-10-18 17:34:46 UTC",
          "description": "The transaction error at timestamp"
        },
        "last_failure_at": {
          "type": "string",
          "format": "date-time",
          "example": "2019-10-18 17:34:46 UTC",
          "description": "The transaction last failure at timestamp"
        },
        "transferred_to_turnkey_at": {
          "type": "string",
          "format": "date-time",
          "example": "2019-10-18 17:34:46 UTC",
          "description": "The transaction request was defer to Turnkey at timestamp"
        },
        "invoice_id": {
          "type": "string",
          "example": "bpiv_62Z1GTzq3Z2WMUEN",
          "description": "The invoice the transaction is linked to"
        },
        "invoice_number": {
          "type": "string",
          "example": "363489",
          "description": "The invoice number the transaction is linked to"
        },
        "merchant_id": {
          "type": "string",
          "example": "m_qpLR6k9ZcyhfED1z",
          "description": "The merchant the transaction is linked to"
        },
        "merchant_name": {
          "type": "string",
          "example": "ACME",
          "description": "The merchant name the transaction is linked to"
        },
        "supplier_id": {
          "type": "string",
          "example": "su_rYVrLDDFonun1yV3",
          "description": "The supplier the transaction is linked to"
        },
        "supplier_name": {
          "type": "string",
          "example": "ACME",
          "description": "The supplier name the transaction is linked to"
        },
        "ubl_id": {
          "type": "string",
          "example": "lub_nX4iPTtNBoutfVae",
          "description": "The loan the transaction is linked to"
        },
        "ubl_reference_number": {
          "type": "string",
          "example": "59139",
          "description": "The loan reference number the transaction is linked to"
        },
        "direct_payment_id": {
          "type": "string",
          "example": "dp_8UW6j84pZdTBYjcP",
          "description": "The direct payment the transaction is linked to"
        },
        "direct_payment_state": {
          "type": "string",
          "example": "sending_payment",
          "description": "The state of the associated direct payment"
        },
        "offline_entity_name": {
          "type": "string",
          "example": "CRA",
          "description": "The offline entity involved in the transaction"
        }
      }
    },
    "GuarantorInfo": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "gua_vYY7pVhh5yMYxTLZ",
          "description": "Guarantor Guid"
        },
        "first_name": {
          "type": "string",
          "example": "George",
          "description": "Guarantor first name"
        },
        "last_name": {
          "type": "string",
          "example": "Guarantor",
          "description": "Guarantor last name"
        }
      },
      "description": "GuarantorInfo model"
    },
    "PdfEntity": {
      "type": "object",
      "properties": {
        "pdf_blob": {
          "type": "string",
          "description": "The pdf blob"
        }
      },
      "description": "PdfEntity model"
    },
    "Agreement": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "agr_83A9MVPJYdAkwAuH",
          "description": "The agreement id"
        },
        "content": {
          "type": "string",
          "example": "These are the the terms of the agreement",
          "description": "Agreement content"
        },
        "type": {
          "type": "string",
          "example": "PaymentPlan",
          "description": "The type of the agreement"
        },
        "accepted_ip_address": {
          "type": "string",
          "example": "217.47.89.121",
          "description": "Client IP Address of the merchant who agreed to agreement"
        },
        "declined_ip_address": {
          "type": "string",
          "example": "217.47.89.121",
          "description": "Client IP Address of the merchant who declined the agreement"
        },
        "opt_out_ip_address": {
          "type": "string",
          "example": "217.47.89.121",
          "description": "Client IP Address of the merchant who opted-out of the agreement"
        },
        "accepted_at": {
          "type": "string",
          "format": "date-time",
          "example": "2019-05-31T14:49:09.920Z",
          "description": "The date at which the agreement was accepted"
        },
        "declined_at": {
          "type": "string",
          "format": "date-time",
          "example": "2019-05-31T14:49:09.920Z",
          "description": "The date at which the agreement was declined"
        },
        "opt_out_at": {
          "type": "string",
          "format": "date-time",
          "example": "2019-05-31T14:49:09.920Z",
          "description": "The date at which the agreement was opted out of"
        },
        "partner_id": {
          "type": "string",
          "example": "p_yoyaoggk3S9Vi5dP",
          "description": "The lending partner id"
        },
        "merchant_id": {
          "type": "string",
          "example": "m_vt9zjnWW7p3kuDeX",
          "description": "The merchant id"
        },
        "user_id": {
          "type": "string",
          "example": "u_u88qrzE1K9A3Qzbi",
          "description": "The user id"
        },
        "state": {
          "type": "string",
          "example": "pending",
          "description": "The state of the agreement"
        }
      },
      "description": "Agreement model"
    },
    "MerchantReceipt": {
      "type": "object",
      "properties": {
        "merchant_id": {
          "type": "string",
          "example": "m_vRL9KrCz4XRmgfYF",
          "description": "Merchant ID"
        },
        "cash_sales_amount": {
          "type": "number",
          "format": "double",
          "example": "10000.00",
          "description": "Value of the total cash sales"
        },
        "credit_sales_amount": {
          "type": "number",
          "format": "double",
          "example": "10000.00",
          "description": "Value of the total credit sales"
        },
        "debit_sales_amount": {
          "type": "number",
          "format": "double",
          "example": "10000.00",
          "description": "Value of the total debit sales"
        },
        "refunds_amount": {
          "type": "number",
          "format": "double",
          "example": "-2000.00",
          "description": "Value of the total refunds"
        },
        "chargebacks_amount": {
          "type": "number",
          "format": "double",
          "example": "-300.00",
          "description": "Value of the total chargebacks"
        },
        "fees_amount": {
          "type": "number",
          "format": "double",
          "example": "-50.00",
          "description": "Value of the total fees"
        },
        "currency": {
          "type": "string",
          "enum": [
            "CAD",
            "USD"
          ],
          "default": "CAD",
          "example": "CAD",
          "description": "Currency ISO code of the advance"
        },
        "record_date": {
          "type": "string",
          "format": "date",
          "example": "2017-09-01",
          "description": "Date for the payment history"
        },
        "settlement_batch_id": {
          "type": "string",
          "example": "Jan-21-2018-0001",
          "description": "Identifier for same day receipts"
        }
      }
    },
    "PagedListingEntity": {
      "type": "object",
      "properties": {
        "offset": {
          "type": "integer",
          "format": "int32",
          "example": 10,
          "description": "The offset into the list entities"
        },
        "limit": {
          "type": "integer",
          "format": "int32",
          "example": 10,
          "description": "The maximum number of entities that could be shown"
        },
        "total_count": {
          "type": "integer",
          "format": "int32",
          "example": 10,
          "description": "The number of entities available"
        },
        "filtered_count": {
          "type": "integer",
          "format": "int32",
          "example": 10,
          "description": "The number of filtered entities available"
        },
        "order_by": {
          "type": "string",
          "example": "created_at",
          "description": "The field the data returned is ordered by"
        },
        "order_direction": {
          "type": "string",
          "example": "desc",
          "description": "The direction the data returned is ordered by"
        },
        "filter": {
          "type": "string",
          "example": "created",
          "description": "The search string used to filter results by"
        }
      }
    },
    "MerchantQueryResult": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "c2afb6e1-e19d-45f0-a1cf-9fd63fc6d7e6",
          "description": "Merchant search result ID"
        },
        "name": {
          "type": "string",
          "example": "7f8c9b71-04fc-4879-bca6-bde97334c90e",
          "description": "Merchant name"
        },
        "phone_number": {
          "type": "string",
          "example": "555 123 4567",
          "description": "Phone number"
        },
        "address_line_1": {
          "type": "string",
          "example": "1 MAIN STREET",
          "description": "Address line 1"
        },
        "address_line_2": {
          "type": "string",
          "example": "2303",
          "description": "Address line 2"
        },
        "city": {
          "type": "string",
          "example": "OTTAWA",
          "description": "City"
        },
        "state_province": {
          "type": "string",
          "example": "ONTARIO",
          "description": "State or province"
        },
        "postal_code": {
          "type": "string",
          "example": "A1A1A1",
          "description": "Postal code"
        },
        "country": {
          "type": "string",
          "example": "CANADA",
          "description": "Country"
        }
      }
    },
    "MerchantQuery": {
      "type": "object",
      "properties": {
        "query_id": {
          "type": "string",
          "example": "1fe35927-d46c-4b29-9e32-d0969157b0ef",
          "description": "Merchant query ID"
        },
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MerchantQueryResult"
          },
          "description": "List of merchants matching the query criteria"
        }
      },
      "description": "MerchantQuery model"
    },
    "TransactionsListingEntity": {
      "type": "object",
      "properties": {
        "offset": {
          "type": "integer",
          "format": "int32",
          "example": 10,
          "description": "The offset into the list entities"
        },
        "limit": {
          "type": "integer",
          "format": "int32",
          "example": 10,
          "description": "The maximum number of entities that could be shown"
        },
        "total_count": {
          "type": "integer",
          "format": "int32",
          "example": 10,
          "description": "The number of entities available"
        },
        "filtered_count": {
          "type": "integer",
          "format": "int32",
          "example": 10,
          "description": "The number of filtered entities available"
        },
        "order_by": {
          "type": "string",
          "example": "created_at",
          "description": "The field the data returned is ordered by"
        },
        "order_direction": {
          "type": "string",
          "example": "desc",
          "description": "The direction the data returned is ordered by"
        },
        "filter": {
          "type": "string",
          "example": "created",
          "description": "The search string used to filter results by"
        },
        "transactions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TransactionEntity"
          },
          "description": "The tracked object events"
        }
      },
      "description": "TransactionsListingEntity model"
    },
    "BankConnectionEntity": {
      "type": "object",
      "properties": {
        "bank_connection_id": {
          "type": "string",
          "example": "fl_6f2074dc-2b29-455e-968b-65dcb94e1bdd",
          "description": "Bank connection ID"
        },
        "state": {
          "type": "string",
          "example": "completed",
          "description": "state of the bank connection"
        },
        "error_reason": {
          "type": "string",
          "example": "failed-flinks-in-call",
          "description": "reason for failure if applicable"
        }
      },
      "description": "BankConnectionEntity model"
    },
    "postCommonBankAccounts": {
      "type": "object",
      "properties": {
        "owner_guid": {
          "type": "string",
          "description": "Merchant ID"
        },
        "currency": {
          "type": "string",
          "description": "Currency ISO code of the advance",
          "enum": [
            "CAD",
            "USD"
          ],
          "default": "CAD"
        },
        "institution_number": {
          "type": "string",
          "description": "Institution number"
        },
        "transit_number": {
          "type": "string",
          "description": "Transit (or branch) number"
        },
        "account_number": {
          "type": "string",
          "description": "Account number"
        },
        "name": {
          "type": "string",
          "description": "Bank account name"
        },
        "account_type": {
          "type": "string",
          "description": "Account type"
        }
      },
      "required": [
        "owner_guid",
        "currency",
        "institution_number",
        "transit_number",
        "account_number"
      ],
      "description": "Create bank account"
    },
    "putCommonBankAccounts": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Bank account name"
        }
      },
      "required": [
        "name"
      ],
      "description": "Update bank account"
    },
    "postMerchants": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The business name for the merchant."
        },
        "address_line_1": {
          "type": "string",
          "description": "Address line 1 (street address/PO Box) for the merchant."
        },
        "address_line_2": {
          "type": "string",
          "description": "Address line 2 (suite/apartment/apartment/building) for the merchant."
        },
        "city": {
          "type": "string",
          "description": "The city/town for the merchant."
        },
        "country": {
          "type": "string",
          "description": "The country for the merchant."
        },
        "postal_code": {
          "type": "string",
          "description": "The postal or ZIP code for the merchant."
        },
        "state_province": {
          "type": "string",
          "description": "The state or province for the merchant."
        },
        "self_attested_date_established": {
          "type": "string",
          "format": "date",
          "description": "Date that business was established"
        },
        "self_attested_average_monthly_sales": {
          "type": "integer",
          "format": "int32",
          "description": "Self attested average monthly sales"
        },
        "phone_number": {
          "type": "string",
          "description": "The phone number for the merchant."
        },
        "date_at_address": {
          "type": "string",
          "description": "Date started at this address."
        },
        "industry": {
          "type": "string",
          "description": "Industry descriptor."
        },
        "avg_monthly_sales": {
          "type": "string",
          "description": "Average monthly sales"
        },
        "partner_merchant_id": {
          "type": "string",
          "description": "Partners identifier for this merchant"
        },
        "onboarding": {
          "type": "boolean",
          "description": "Whether this is through the onboarding flow or not"
        },
        "business_num": {
          "type": "string",
          "description": "Business number"
        },
        "incorporated_in": {
          "type": "string",
          "description": "The jurisdiction that the merchant was incorporated in"
        },
        "doing_business_as": {
          "type": "string",
          "description": "The alternative name that the merchant is doing business as"
        },
        "address": {
          "type": "string",
          "description": "Address"
        },
        "email": {
          "type": "string",
          "description": "Email for the merchant"
        },
        "lead_guid": {
          "type": "string",
          "description": "The lead guid to be assigned to this merchant"
        },
        "owner_since": {
          "type": "string",
          "format": "date",
          "description": "Date from which the applicant has been owner of this merchant since"
        }
      },
      "required": [
        "name"
      ],
      "description": "Create a merchant"
    },
    "postMerchantsIdSelectedSalesVolumeAccounts": {
      "type": "object",
      "properties": {
        "bank_account_ids": {
          "type": "array",
          "description": "Selected sales volume accounts array.",
          "items": {
            "type": "string"
          }
        },
        "campaign_id": {
          "type": "string"
        }
      },
      "required": [
        "bank_account_ids"
      ],
      "description": "posts select bank accounts for sales volumes for merchant"
    },
    "postMerchantsIdSelectBankAccount": {
      "type": "object",
      "properties": {
        "bank_account_id": {
          "type": "string",
          "description": "Selected bank account."
        },
        "campaign_id": {
          "type": "string"
        }
      },
      "required": [
        "bank_account_id"
      ],
      "description": "posts select bank account for merchant"
    },
    "postMerchantsIdCreateBankAccount": {
      "type": "object",
      "properties": {
        "institution_number": {
          "type": "string",
          "description": "Institution number."
        },
        "transit_number": {
          "type": "string",
          "description": "Transit number."
        },
        "account_number": {
          "type": "string",
          "description": "Account number."
        }
      },
      "required": [
        "institution_number",
        "transit_number",
        "account_number"
      ],
      "description": "create bank account for merchant"
    },
    "putMerchants": {
      "type": "object",
      "properties": {
        "business_num": {
          "type": "string",
          "description": "Business number"
        },
        "name": {
          "type": "string",
          "description": "Merchant name"
        },
        "address_line_1": {
          "type": "string",
          "description": "The first line of the registered address for the merchant"
        },
        "address_line_2": {
          "type": "string",
          "description": "The second line of the registered address for the merchant"
        },
        "city": {
          "type": "string",
          "description": "The city of the registered address for the merchant"
        },
        "postal_code": {
          "type": "string",
          "description": "The postal code of the registered address for the merchant"
        },
        "state_province": {
          "type": "string",
          "description": "The postal code of the registered address for the merchant"
        },
        "country": {
          "type": "string",
          "description": "The postal code of the registered address for the merchant"
        },
        "incorporated_in": {
          "type": "string",
          "description": "Jurisdiction of incorporation"
        },
        "doing_business_as": {
          "type": "string",
          "description": "The alternative/franchise name that the merchant is doing business as"
        },
        "kyc_verified": {
          "$ref": "#/definitions/KycVerifiedEntity",
          "description": "The kyc verified status of the merchant",
          "example": {
            "status": "verified",
            "date_last_verified": "2018-01-01",
            "details": [
              {
                "check": "confirmation_of_existence",
                "status": "verified",
                "date_last_verified": "2018-01-01",
                "guid": "a_7W3LnmmshfqYgSEE"
              }
            ]
          }
        },
        "selected_mm_account_details": {
          "$ref": "#/definitions/BankAccountDetailsEntity",
          "description": "Details of the selected MM account",
          "example": {
            "id": "ba_123",
            "institution_name": "Tangerine",
            "masked_account_number": "********7890",
            "account_uuid": "62cf2b28-5e87-11e8-9c2d-fa7ae01bbebc",
            "preferred_source": "flinks",
            "connection_guid": "fl_123",
            "reselect_account": false
          }
        },
        "selected_sales_volume_account_details": {
          "$ref": "#/definitions/BankAccountDetailsEntity",
          "description": "Details of the selected sales volume account",
          "example": {
            "id": "ba_123",
            "institution_name": "Tangerine",
            "masked_account_number": "********7890",
            "account_uuid": "62cf2b28-5e87-11e8-9c2d-fa7ae01bbebc",
            "preferred_source": "flinks",
            "connection_guid": "fl_123",
            "reselect_account": false
          }
        },
        "flinks_refresh_in_progress_id": {
          "type": "string",
          "description": "Identifier of which Flinks connection is currently ongoing"
        },
        "cfa_last_refreshed_at": {
          "type": "string",
          "format": "date-time",
          "description": "Date CFA data was last refreshed at"
        },
        "desired_bank_account_balance": {
          "type": "number",
          "format": "float",
          "description": "The merchant's desired bank account balance"
        },
        "total_remaining_payment_amount": {
          "type": "number",
          "format": "float",
          "description": "Outstanding Balance across all financing products"
        },
        "valid_cfa_accounts": {
          "type": "boolean",
          "description": "Determine if the merchant has valid CFA accounts"
        },
        "on_payment_plan": {
          "type": "boolean",
          "description": "Whether the merchant has loans with a payment plan"
        },
        "loc_offer_id": {
          "type": "string",
          "description": "LOC offer id"
        },
        "access_funds_blocked": {
          "type": "boolean",
          "description": "Whether the merchant should be blocked from accessing funds"
        },
        "in_bad_standing": {
          "type": "boolean",
          "description": "Whether the merchant is in bad standing"
        },
        "can_use_initial_amortization": {
          "type": "boolean",
          "description": "Whether the merchant can receive initial schedule from app"
        },
        "quickbooks_refresh_token": {
          "type": "string",
          "description": "Refresh token for the merchant's company in Quickbooks"
        },
        "quickbooks_refresh_token_expires_at": {
          "type": "string",
          "format": "date-time",
          "description": "Expiration date and time for the Quickbooks refresh token"
        },
        "quickbooks_realm_id": {
          "type": "string",
          "description": "Realm ID for the merchant's company in Quickbooks"
        },
        "facebook_access_token": {
          "type": "string",
          "description": "Access token for the merchant's Facebook account"
        },
        "facebook_access_token_expires_at": {
          "type": "string",
          "format": "date-time",
          "description": "Expiration date and time for the Facebook refresh token"
        }
      },
      "description": "updates a merchant"
    },
    "postMerchantQueries": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Merchant name"
        },
        "address_line_1": {
          "type": "string",
          "description": "Address line 1"
        },
        "city": {
          "type": "string",
          "description": "City"
        },
        "state_province": {
          "type": "string",
          "description": "State or province"
        },
        "postal_code": {
          "type": "string",
          "description": "Postal code"
        },
        "country": {
          "type": "string",
          "description": "Country"
        },
        "address_line_2": {
          "type": "string",
          "description": "Address line 2"
        },
        "phone_number": {
          "type": "string",
          "description": "Phone number"
        }
      },
      "required": [
        "name",
        "address_line_1",
        "city",
        "state_province",
        "postal_code",
        "country"
      ],
      "description": "Performs merchant queries using business lookup services"
    },
    "postMerchantQueriesQueryIdSelect": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Query result id to use"
        },
        "avg_monthly_sales": {
          "type": "string",
          "description": "Average Monthly sales"
        },
        "date_at_address": {
          "type": "string",
          "description": "Date at this address"
        },
        "industry": {
          "type": "string",
          "description": "Industry description"
        },
        "business_num": {
          "type": "string",
          "description": "Business number"
        },
        "incorporated_in": {
          "type": "string",
          "description": "The jurisdiction that the merchant was incorporated in"
        },
        "doing_business_as": {
          "type": "string",
          "description": "The alternative name that the merchant is doing business as"
        },
        "self_attested_date_established": {
          "type": "string",
          "format": "date",
          "description": "Date that business was established"
        },
        "self_attested_average_monthly_sales": {
          "type": "integer",
          "format": "int32",
          "description": "Self attested average monthly sales"
        },
        "lead_guid": {
          "type": "string",
          "description": "The lead guid to be assigned to this merchant"
        },
        "owner_since": {
          "type": "string",
          "format": "date",
          "description": "Date from which the applicant has been owner of this merchant since"
        }
      },
      "required": [
        "id"
      ],
      "description": "Selects one of the results from the specified query to be used for creating a new merchant"
    },
    "postApplicants": {
      "type": "object",
      "properties": {
        "merchant_guid": {
          "type": "string",
          "description": "Merchant identifier for this applicant"
        },
        "first_name": {
          "type": "string",
          "description": "First name of the applicant"
        },
        "last_name": {
          "type": "string",
          "description": "Last name of the applicant"
        },
        "middle_initial": {
          "type": "string",
          "description": "Middle initial of the applicant"
        },
        "suffix": {
          "type": "string",
          "description": "Title or suffix"
        },
        "date_of_birth": {
          "type": "string",
          "format": "date",
          "description": "DOB of the applicant"
        },
        "address_line1": {
          "type": "string",
          "description": "Address Line 1"
        },
        "city": {
          "type": "string",
          "description": "City of the applicant"
        },
        "province": {
          "type": "string",
          "description": "province of the applicant"
        },
        "country": {
          "type": "string",
          "description": "country of the applicant"
        },
        "sin": {
          "type": "string",
          "description": "Social Insurance Number"
        },
        "annual_income": {
          "type": "number",
          "format": "double",
          "description": "Annual income"
        },
        "email": {
          "type": "string",
          "description": "Email address"
        },
        "address_line2": {
          "type": "string",
          "description": "Extended address - line 2"
        },
        "postal_code": {
          "type": "string",
          "description": "postal code"
        },
        "phone_number": {
          "type": "string",
          "description": "phone number"
        },
        "owner_since": {
          "type": "string",
          "format": "date",
          "description": "Date from which the applicant has been owner of this merchant since"
        },
        "ownership_percentage": {
          "type": "number",
          "format": "float",
          "description": "what percentage of ownership applicant has on this merchant"
        }
      },
      "required": [
        "merchant_guid",
        "first_name",
        "last_name",
        "date_of_birth",
        "address_line1",
        "city",
        "province",
        "country"
      ],
      "description": "Create an applicant"
    },
    "putApplicantsGuidAuthenticate": {
      "type": "object",
      "properties": {
        "authentication_query_guid": {
          "type": "string",
          "description": "The GUID of the authentication query."
        },
        "applicant_responses": {
          "type": "array",
          "description": "The applicant supplied responses.",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "required": [
        "authentication_query_guid",
        "applicant_responses"
      ],
      "description": "API for completing applicant authentication"
    },
    "postApplicantsGuidAuthenticate": {
      "type": "object",
      "properties": {
        "language": {
          "type": "string",
          "description": "The language the questions should be returned in.",
          "default": "English"
        }
      },
      "description": "API for initiating applicant authentication"
    },
    "postGuarantorInfos": {
      "type": "object",
      "properties": {
        "application_guid": {
          "type": "string",
          "description": "Application identifier for this guarantor"
        },
        "first_name": {
          "type": "string",
          "description": "First name of the guarantor"
        },
        "last_name": {
          "type": "string",
          "description": "Last name of the guarantor"
        },
        "middle_initial": {
          "type": "string",
          "description": "Middle initial of the guarantor"
        },
        "date_of_birth": {
          "type": "string",
          "format": "date",
          "description": "DOB of the guarantor"
        },
        "address_line_1": {
          "type": "string",
          "description": "Address Line 1"
        },
        "city": {
          "type": "string",
          "description": "City of the guarantor"
        },
        "state_province": {
          "type": "string",
          "description": "province of the guarantor"
        },
        "country": {
          "type": "string",
          "description": "country of the guarantor"
        },
        "relationship": {
          "type": "string",
          "description": "relationship to the applicant"
        },
        "email": {
          "type": "string",
          "description": "Email address"
        },
        "address_line_2": {
          "type": "string",
          "description": "Extended address - line 2"
        },
        "postal_code": {
          "type": "string",
          "description": "postal code"
        },
        "phone_number": {
          "type": "string",
          "description": "phone number"
        }
      },
      "required": [
        "application_guid",
        "first_name",
        "last_name",
        "date_of_birth",
        "address_line_1",
        "city",
        "state_province",
        "country",
        "email"
      ],
      "description": "Create a guarantor information"
    },
    "postLeads": {
      "type": "object",
      "properties": {
        "external_id": {
          "type": "string",
          "description": "Lead external identifier"
        },
        "applicant_email": {
          "type": "string",
          "description": "Applicant email"
        },
        "applicant_first_name": {
          "type": "string",
          "description": "Applicant first name"
        },
        "applicant_last_name": {
          "type": "string",
          "description": "Applicant last name"
        },
        "merchant_name": {
          "type": "string",
          "description": "Business name"
        },
        "language": {
          "type": "string",
          "description": "Preferred language",
          "enum": [
            "EN",
            "FR"
          ],
          "default": "EN"
        },
        "casl_consent": {
          "type": "boolean",
          "description": "CASL consent",
          "default": false
        },
        "source": {
          "type": "string",
          "description": "Lead source"
        },
        "endorsing_partner_id": {
          "type": "string",
          "description": "Endorsing partner ID"
        },
        "user_guid": {
          "type": "string",
          "description": "User guid to link lead to"
        }
      },
      "required": [
        "external_id",
        "applicant_email"
      ],
      "description": "Create a lead"
    },
    "putLeadsIdDesiredBankAccountBalance": {
      "type": "object",
      "properties": {
        "desired_bank_account_balance": {
          "type": "number",
          "format": "float",
          "description": "Desired bank account balance."
        }
      },
      "required": [
        "desired_bank_account_balance"
      ],
      "description": "update a lead's desired bank account balance"
    },
    "patchLeads": {
      "type": "object",
      "properties": {
        "external_id": {
          "type": "string",
          "description": "Lead external identifier"
        },
        "applicant_email": {
          "type": "string",
          "description": "Applicant email"
        },
        "applicant_first_name": {
          "type": "string",
          "description": "Applicant first name"
        },
        "applicant_last_name": {
          "type": "string",
          "description": "Applicant last name"
        },
        "merchant_name": {
          "type": "string",
          "description": "Business name"
        },
        "language": {
          "type": "string",
          "description": "Preferred language",
          "enum": [
            "EN",
            "FR"
          ],
          "default": "EN"
        },
        "casl_consent": {
          "type": "boolean",
          "description": "CASL consent",
          "default": false
        },
        "source": {
          "type": "string",
          "description": "Lead source"
        },
        "quickbooks_refresh_token": {
          "type": "string",
          "description": "Refresh token for the lead's company in Quickbooks"
        },
        "quickbooks_refresh_token_expires_at": {
          "type": "string",
          "format": "date-time",
          "description": "Expiration date and time for the Quickbooks refresh token"
        },
        "quickbooks_realm_id": {
          "type": "string",
          "description": "Realm ID for the lead's company in Quickbooks"
        }
      },
      "description": "update a lead"
    },
    "postSuppliers": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The business name for the supplier."
        },
        "institution_number": {
          "type": "string",
          "description": "Insititution number."
        },
        "transit_number": {
          "type": "string",
          "description": "Transit number."
        },
        "account_number": {
          "type": "string",
          "description": "Account number."
        },
        "address": {
          "type": "string",
          "description": "Full address for the supplier."
        },
        "address_line_1": {
          "type": "string",
          "description": "Address line 1 (street address/PO Box) for the supplier."
        },
        "address_line_2": {
          "type": "string",
          "description": "Address line 2 (suite/apartment/apartment/building) for the supplier."
        },
        "city": {
          "type": "string",
          "description": "The city/town for the supplier."
        },
        "country": {
          "type": "string",
          "description": "The country for the supplier."
        },
        "postal_code": {
          "type": "string",
          "description": "The postal or ZIP code for the supplier."
        },
        "state_province": {
          "type": "string",
          "description": "The state or province for the supplier."
        },
        "phone_number": {
          "type": "string",
          "description": "The phone number for the supplier."
        },
        "business_number": {
          "type": "string",
          "description": "The business number for the supplier."
        },
        "jurisdiction": {
          "type": "string",
          "description": "The jurisdiction where the supplier was registered."
        },
        "operate_in": {
          "type": "string",
          "description": "The jurisdiction where the supplier operates."
        },
        "supplier_url": {
          "type": "string",
          "description": "URL issued for the supplier."
        },
        "ef_merchant_number": {
          "type": "string",
          "description": "alphanumeric Equifax customer id"
        },
        "ef_customer_code": {
          "type": "string",
          "description": "numeric Equifax customer id"
        }
      },
      "required": [
        "name",
        "institution_number",
        "transit_number",
        "account_number"
      ],
      "description": "API for managing suppliers."
    },
    "postLendingApplications": {
      "type": "object",
      "properties": {
        "merchant_id": {
          "type": "string",
          "description": "Merchant ID"
        },
        "offer_id": {
          "type": "string",
          "description": "ID of offer to which the application is applying"
        },
        "principal_amount": {
          "type": "number",
          "format": "double",
          "description": "Value of the depositing loan"
        },
        "repayment_schedule": {
          "type": "string",
          "description": "Repayment schedule for the loan"
        },
        "merchant_user_email": {
          "type": "string",
          "description": "Email of the authenticated user (representing the merchant) that applied for an offer"
        },
        "merchant_user_id": {
          "type": "string",
          "description": "Unique user ID of the authenticated user (representing the merchant) that applied for an offer"
        },
        "interest_amount": {
          "type": "number",
          "format": "float",
          "description": "Amount of the interest"
        },
        "repayment_amount": {
          "type": "number",
          "format": "float",
          "description": "Amount for each repayment"
        },
        "loan_term": {
          "type": "integer",
          "format": "int32",
          "description": "Days to repay"
        },
        "loan_term_id": {
          "type": "string",
          "description": "The loan term chosen"
        },
        "payor_account_id": {
          "type": "string",
          "description": "Payer account"
        },
        "apr": {
          "type": "number",
          "format": "double",
          "description": "APR for the application/loan"
        },
        "payee_id": {
          "type": "string",
          "description": "Payee identifier, if not self"
        },
        "payee_account_num": {
          "type": "string",
          "description": "Payee account number"
        },
        "payee_invoice_num": {
          "type": "string",
          "description": "Payee invoice number"
        }
      },
      "required": [
        "merchant_id",
        "offer_id",
        "principal_amount",
        "repayment_schedule",
        "interest_amount",
        "repayment_amount"
      ],
      "description": "creates an application for an offer"
    },
    "PromotionEntity": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "promo_JY2S8DimR9ViZy3D",
          "description": "Promotion ID"
        },
        "code": {
          "type": "string",
          "example": "march_2020",
          "description": "Promotion Code"
        }
      },
      "description": "PromotionEntity model"
    },
    "PromotionEnrollmentEntity": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "promoenr_p6c75wKzmKMfqWWy",
          "description": "Promotion optin ID"
        },
        "awarded_points": {
          "type": "number",
          "format": "float",
          "example": 200,
          "description": "Balance"
        },
        "redeemable_points": {
          "type": "number",
          "format": "float",
          "example": 200,
          "description": "Balance"
        },
        "redeemed_points": {
          "type": "number",
          "format": "float",
          "example": 200,
          "description": "Balance"
        },
        "points_metadata": {
          "type": "object",
          "example": "{ current_price: 10 }",
          "description": "Metadata to describe enrollment points"
        },
        "state": {
          "type": "string",
          "example": "pending",
          "description": "State"
        },
        "milestones": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PromotionEnrollmentMilestoneEntity"
          },
          "description": "Milestones"
        },
        "redemptions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PromotionEnrollmentRedemptionEntity"
          },
          "description": "Redemptions"
        }
      },
      "description": "PromotionEnrollmentEntity model"
    },
    "PromotionEnrollmentMilestoneEntity": {
      "type": "object",
      "properties": {
        "state": {
          "type": "string",
          "example": "pending",
          "description": "Milestone state"
        },
        "points": {
          "type": "integer",
          "format": "int64",
          "example": 200,
          "description": "Points to be awarded when the milestone is completed"
        },
        "due_date": {
          "type": "string",
          "format": "date",
          "example": "20-03-2022",
          "description": "Date when the milestone is due for completion"
        },
        "optional": {
          "type": "boolean",
          "example": true,
          "description": "Flag to indicate if the milestone is mandatory for the enrollment"
        },
        "type": {
          "type": "string",
          "example": "ManualEligibility",
          "description": "Milestone type"
        },
        "failure_reason": {
          "type": "string",
          "example": "invalid_bank_account",
          "description": "The reason the milestone was marked as failed"
        }
      }
    },
    "PromotionEnrollmentRedemptionEntity": {
      "type": "object",
      "properties": {
        "state": {
          "type": "string",
          "example": "requested",
          "description": "Redemption state"
        },
        "points": {
          "type": "integer",
          "format": "int64",
          "example": 200,
          "description": "Redeemed points"
        },
        "type": {
          "type": "string",
          "example": "OfflineStock",
          "description": "Redemption type"
        }
      }
    }
  }
}
